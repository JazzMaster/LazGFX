
*******************************************************************************
after parsing
OpenGLVersion:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (45,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (45,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = AnsiString = "AnsiString", pos = (45,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = AnsiString = "AnsiString", pos = (45,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (calln, resultdef = AnsiString = "AnsiString", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
            left =
            (callparan, resultdef = Word = "Word", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ordconstn, resultdef = Word = "Word", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 0
               )

            )
            (callparan, resultdef = PChar = "^Char", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = PChar = "^Char", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (45,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = GLGETSTRING
                  )
                  left =
                  (callparan, resultdef = LongWord = "DWord", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongWord = "DWord", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 7938
                     )

                  )
               )

            )
            (callparan, resultdef = <nil>, pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
         )
      )

   )
)

*******************************************************************************
after the firstpass
OpenGLVersion:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (44,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (44,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
      (blockn, resultdef = $void = "untyped", pos = (44,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (45,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
            (calln, resultdef = AnsiString = "AnsiString", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
               proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
               left =
               (callparan, resultdef = PChar = "^Char", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (calln, resultdef = PChar = "^Char", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     proc = <nil>
                     right =
                     (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (45,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = GLGETSTRING
                     )
                     left =
                     (callparan, resultdef = LongWord = "DWord", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                        (ordconstn, resultdef = LongWord = "DWord", pos = (45,35), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 7938
                        )

                     )
                  )

               )
               (callparan, resultdef = <nil>, pos = (45,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = AnsiString = "AnsiString", pos = (45,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (45,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (45,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
VendorName:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (50,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (50,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = AnsiString = "AnsiString", pos = (50,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = AnsiString = "AnsiString", pos = (50,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (calln, resultdef = AnsiString = "AnsiString", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
            left =
            (callparan, resultdef = Word = "Word", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ordconstn, resultdef = Word = "Word", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 0
               )

            )
            (callparan, resultdef = PChar = "^Char", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = PChar = "^Char", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (50,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = GLGETSTRING
                  )
                  left =
                  (callparan, resultdef = LongWord = "DWord", pos = (50,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongWord = "DWord", pos = (50,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 7936
                     )

                  )
               )

            )
            (callparan, resultdef = <nil>, pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
         )
      )

   )
)

*******************************************************************************
after the firstpass
VendorName:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (49,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (49,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
      (blockn, resultdef = $void = "untyped", pos = (49,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (50,35), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
            (calln, resultdef = AnsiString = "AnsiString", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
               proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
               left =
               (callparan, resultdef = PChar = "^Char", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (calln, resultdef = PChar = "^Char", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     proc = <nil>
                     right =
                     (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (50,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = GLGETSTRING
                     )
                     left =
                     (callparan, resultdef = LongWord = "DWord", pos = (50,34), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                        (ordconstn, resultdef = LongWord = "DWord", pos = (50,34), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 7936
                        )

                     )
                  )

               )
               (callparan, resultdef = <nil>, pos = (50,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = AnsiString = "AnsiString", pos = (50,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (50,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (50,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
RendererName:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (55,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (55,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = AnsiString = "AnsiString", pos = (55,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = AnsiString = "AnsiString", pos = (55,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (calln, resultdef = AnsiString = "AnsiString", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
            left =
            (callparan, resultdef = Word = "Word", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ordconstn, resultdef = Word = "Word", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 0
               )

            )
            (callparan, resultdef = PChar = "^Char", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = PChar = "^Char", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (55,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = GLGETSTRING
                  )
                  left =
                  (callparan, resultdef = LongWord = "DWord", pos = (55,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongWord = "DWord", pos = (55,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 7937
                     )

                  )
               )

            )
            (callparan, resultdef = <nil>, pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
         )
      )

   )
)

*******************************************************************************
after the firstpass
RendererName:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (54,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (54,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
      (blockn, resultdef = $void = "untyped", pos = (54,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (55,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
            (calln, resultdef = AnsiString = "AnsiString", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
               proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
               left =
               (callparan, resultdef = PChar = "^Char", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (calln, resultdef = PChar = "^Char", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     proc = <nil>
                     right =
                     (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (55,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = GLGETSTRING
                     )
                     left =
                     (callparan, resultdef = LongWord = "DWord", pos = (55,36), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                        (ordconstn, resultdef = LongWord = "DWord", pos = (55,36), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 7937
                        )

                     )
                  )

               )
               (callparan, resultdef = <nil>, pos = (55,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = AnsiString = "AnsiString", pos = (55,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (55,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (55,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
ShadingLanguageVersion:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (60,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = AnsiString = "AnsiString", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = AnsiString = "AnsiString", pos = (60,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (calln, resultdef = AnsiString = "AnsiString", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
            left =
            (callparan, resultdef = Word = "Word", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ordconstn, resultdef = Word = "Word", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 0
               )

            )
            (callparan, resultdef = PChar = "^Char", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = PChar = "^Char", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (60,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = GLGETSTRING
                  )
                  left =
                  (callparan, resultdef = LongWord = "DWord", pos = (60,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongWord = "DWord", pos = (60,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 35724
                     )

                  )
               )

            )
            (callparan, resultdef = <nil>, pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
         )
      )

   )
)

*******************************************************************************
after the firstpass
ShadingLanguageVersion:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (59,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (59,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
      (blockn, resultdef = $void = "untyped", pos = (59,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (60,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
            (calln, resultdef = AnsiString = "AnsiString", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
               proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
               left =
               (callparan, resultdef = PChar = "^Char", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (calln, resultdef = PChar = "^Char", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     proc = <nil>
                     right =
                     (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):^Char;CDecl>", pos = (60,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = GLGETSTRING
                     )
                     left =
                     (callparan, resultdef = LongWord = "DWord", pos = (60,52), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                        (ordconstn, resultdef = LongWord = "DWord", pos = (60,52), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 35724
                        )

                     )
                  )

               )
               (callparan, resultdef = <nil>, pos = (60,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = AnsiString = "AnsiString", pos = (60,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (60,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (60,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
VersionDetails:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (64,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (68,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (65,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = AnsiString = "AnsiString", pos = (65,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = AnsiString = "AnsiString", pos = (65,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (addn, resultdef = AnsiString = "AnsiString", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (addn, resultdef = AnsiString = "AnsiString", pos = (67,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (addn, resultdef = AnsiString = "AnsiString", pos = (67,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (addn, resultdef = AnsiString = "AnsiString", pos = (67,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (addn, resultdef = AnsiString = "AnsiString", pos = (66,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (addn, resultdef = AnsiString = "AnsiString", pos = (66,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (addn, resultdef = AnsiString = "AnsiString", pos = (66,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (addn, resultdef = AnsiString = "AnsiString", pos = (65,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (addn, resultdef = AnsiString = "AnsiString", pos = (65,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (addn, resultdef = AnsiString = "AnsiString", pos = (65,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (stringconstn, resultdef = AnsiString = "AnsiString", pos = (65,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )
                                       (calln, resultdef = AnsiString = "AnsiString", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                          proc = OpenGLVersion(<var AnsiString>):AnsiString;
                                          left =
                                          (callparan, resultdef = <nil>, pos = (65,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             (nothingn, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             )

                                          )
                                       )
                                    )
                                    (stringconstn, resultdef = AnsiString = "AnsiString", pos = (65,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    )
                                 )
                                 (stringconstn, resultdef = AnsiString = "AnsiString", pos = (66,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 )
                              )
                              (calln, resultdef = AnsiString = "AnsiString", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 proc = VendorName(<var AnsiString>):AnsiString;
                                 left =
                                 (callparan, resultdef = <nil>, pos = (66,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (nothingn, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    )

                                 )
                              )
                           )
                           (stringconstn, resultdef = AnsiString = "AnsiString", pos = (66,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           )
                        )
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (67,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        )
                     )
                     (calln, resultdef = AnsiString = "AnsiString", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        proc = RendererName(<var AnsiString>):AnsiString;
                        left =
                        (callparan, resultdef = <nil>, pos = (67,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (nothingn, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           )

                        )
                     )
                  )
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (67,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  )
               )
               (stringconstn, resultdef = AnsiString = "AnsiString", pos = (68,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )
            )
            (calln, resultdef = AnsiString = "AnsiString", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               proc = ShadingLanguageVersion(<var AnsiString>):AnsiString;
               left =
               (callparan, resultdef = <nil>, pos = (68,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (nothingn, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  )

               )
            )
         )
      )

   )
)

*******************************************************************************
after the firstpass
VersionDetails:AnsiString;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (64,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (64,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (64,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (64,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (64,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (68,52), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = $fpc_ansistr_concat_multi(var RawByteString;const {Open} Array Of RawByteString;<const Int64>;Word);
               left =
               (callparan, resultdef = <no type symbol> = "{Open} Array Of RawByteString", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                  (typeconvn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_address_taken], convtype = tc_equal
                     (arrayconstructn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_novariaallowed]
                        (stringconstn, resultdef = AnsiString = "AnsiString", pos = (65,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                        )
                        (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (calln, resultdef = RawByteString = "AnsiString", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              proc = OpenGLVersion(<var AnsiString>):AnsiString;
                              callinitblock =
                              (blockn, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (statementn, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                    (tempcreaten, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                       size = 8, temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D5A40
                                       tempinit =
                                       nil
                                    )

                                 )
                              )
                              callcleanupblock =
                              (blockn, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (statementn, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                    (tempdeleten, resultdef = $void = "untyped", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                       release_to_normal: TRUE, temptypedef = RawByteString = "AnsiString", temptype = tt_persistent, tempinfo = $00007F563D1D5A40
                                    )

                                 )
                              )
                              left =
                              (callparan, resultdef = <nil>, pos = (65,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                 (temprefn, resultdef = RawByteString = "AnsiString", pos = (65,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret]
                                    temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D5A40
                                 )

                              )
                           )
                           (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (stringconstn, resultdef = AnsiString = "AnsiString", pos = (65,46), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                              )
                              (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (stringconstn, resultdef = AnsiString = "AnsiString", pos = (66,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 )
                                 (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (calln, resultdef = RawByteString = "AnsiString", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                       proc = VendorName(<var AnsiString>):AnsiString;
                                       callinitblock =
                                       (blockn, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          (statementn, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                             (tempcreaten, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                                size = 8, temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D59C0
                                                tempinit =
                                                nil
                                             )

                                          )
                                       )
                                       callcleanupblock =
                                       (blockn, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          (statementn, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                             (tempdeleten, resultdef = $void = "untyped", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                release_to_normal: TRUE, temptypedef = RawByteString = "AnsiString", temptype = tt_persistent, tempinfo = $00007F563D1D59C0
                                             )

                                          )
                                       )
                                       left =
                                       (callparan, resultdef = <nil>, pos = (66,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                          (temprefn, resultdef = RawByteString = "AnsiString", pos = (66,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret]
                                             temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D59C0
                                          )

                                       )
                                    )
                                    (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (stringconstn, resultdef = AnsiString = "AnsiString", pos = (66,35), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                       )
                                       (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                          (stringconstn, resultdef = AnsiString = "AnsiString", pos = (67,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                          )
                                          (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             (calln, resultdef = RawByteString = "AnsiString", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                proc = RendererName(<var AnsiString>):AnsiString;
                                                callinitblock =
                                                (blockn, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                   (statementn, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                      (tempcreaten, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                                         size = 8, temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D5AC0
                                                         tempinit =
                                                         nil
                                                      )

                                                   )
                                                )
                                                callcleanupblock =
                                                (blockn, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                   (statementn, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                      (tempdeleten, resultdef = $void = "untyped", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                         release_to_normal: TRUE, temptypedef = RawByteString = "AnsiString", temptype = tt_persistent, tempinfo = $00007F563D1D5AC0
                                                      )

                                                   )
                                                )
                                                left =
                                                (callparan, resultdef = <nil>, pos = (67,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                                   (temprefn, resultdef = RawByteString = "AnsiString", pos = (67,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret]
                                                      temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D5AC0
                                                   )

                                                )
                                             )
                                             (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                (stringconstn, resultdef = AnsiString = "AnsiString", pos = (67,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                )
                                                (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                   (stringconstn, resultdef = AnsiString = "AnsiString", pos = (68,13), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                   )
                                                   (arrayconstructn, resultdef = <nil>, pos = (68,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                      (calln, resultdef = RawByteString = "AnsiString", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                         proc = ShadingLanguageVersion(<var AnsiString>):AnsiString;
                                                         callinitblock =
                                                         (blockn, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                            (statementn, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                               (tempcreaten, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                                                  size = 8, temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D5B40
                                                                  tempinit =
                                                                  nil
                                                               )

                                                            )
                                                         )
                                                         callcleanupblock =
                                                         (blockn, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                            (statementn, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                               (tempdeleten, resultdef = $void = "untyped", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                                  release_to_normal: TRUE, temptypedef = RawByteString = "AnsiString", temptype = tt_persistent, tempinfo = $00007F563D1D5B40
                                                               )

                                                            )
                                                         )
                                                         left =
                                                         (callparan, resultdef = <nil>, pos = (68,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                                            (temprefn, resultdef = RawByteString = "AnsiString", pos = (68,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret]
                                                               temptypedef = RawByteString = "AnsiString", tempinfo = $00007F563D1D5B40
                                                            )

                                                         )
                                                      )
                                                      nil
                                                   )
                                                )
                                             )
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )

               )
               (callparan, resultdef = RawByteString = "AnsiString", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = RawByteString = "AnsiString", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (65,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
               (callparan, resultdef = Int64 = "Int64", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Int64 = "Int64", pos = (68,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit]
                     value = 10
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
LoadStringResource(AnsiString):AnsiString is nested;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (79,74), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (loadn, resultdef = TResourceStream = "TResourceStream", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
            nil
            symbol = DATASTREAM
         )
         (calln, resultdef = TResourceStream = "TResourceStream", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = constructor Create(<TResourceStream>;<Pointer>;QWord;const AnsiString;PChar);
            methodpointer =
            (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TResourceStream", pos = (79,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (typen, resultdef = TResourceStream = "TResourceStream", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )
            )
            left =
            (callparan, resultdef = PChar = "^Char", pos = (79,73), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (typeconvn, resultdef = PChar = "^Char", pos = (79,73), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_cstring_2_pchar
                  (stringconstn, resultdef = <no type symbol> = "Constant String", pos = (79,73), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  )
               )

            )
            (callparan, resultdef = AnsiString = "AnsiString", pos = (79,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = AnsiString = "AnsiString", pos = (79,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = RESOURCENAME
               )

            )
            (callparan, resultdef = QWord = "QWord", pos = (79,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = QWord = "QWord", pos = (79,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = HINSTANCE:QWord;
               )

            )
            (callparan, resultdef = <nil>, pos = (79,74), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (79,74), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
            (callparan, resultdef = <nil>, pos = (79,74), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (79,74), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (80,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = AnsiString = "AnsiString", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = AnsiString = "AnsiString", pos = (80,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (calln, resultdef = AnsiString = "AnsiString", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
            left =
            (callparan, resultdef = Word = "Word", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ordconstn, resultdef = Word = "Word", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 0
               )

            )
            (callparan, resultdef = PChar = "^Char", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (typeconvn, resultdef = PChar = "^Char", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit], convtype = tc_equal
                  (subscriptn, resultdef = Pointer = "^untyped", pos = (80,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue]
                     (loadn, resultdef = TResourceStream = "TResourceStream", pos = (80,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = DATASTREAM
                     )
                  )
               )

            )
            (callparan, resultdef = <nil>, pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (nothingn, resultdef = $void = "untyped", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (inlinen, resultdef = $void = "untyped", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (callparan, resultdef = Int64 = "Int64", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (calln, resultdef = Int64 = "Int64", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue]
               proc = GetSize(<TStream>):Int64;
               methodpointer =
               (loadn, resultdef = TResourceStream = "TResourceStream", pos = (81,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = DATASTREAM
               )
               left =
               (callparan, resultdef = <nil>, pos = (81,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (nothingn, resultdef = $void = "untyped", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  )

               )
            )

         )
         (callparan, resultdef = AnsiString = "AnsiString", pos = (81,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = AnsiString = "AnsiString", pos = (81,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
               (loadn, resultdef = AnsiString = "AnsiString", pos = (81,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                  nil
                  symbol = result
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (82,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = Free(<TObject>);
         methodpointer =
         (loadn, resultdef = TResourceStream = "TResourceStream", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = DATASTREAM
         )
         left =
         (callparan, resultdef = <nil>, pos = (82,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (nothingn, resultdef = $void = "untyped", pos = (82,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            )

         )
      )

   )
)

*******************************************************************************
after parsing
CreateShader(LongWord;AnsiString):DWord is nested;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (88,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (88,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = LongWord = "DWord", pos = (88,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = LongWord = "DWord", pos = (88,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (calln, resultdef = LongWord = "DWord", pos = (88,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = <nil>
            right =
            (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):DWord;CDecl>", pos = (88,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = GLCREATESHADER
            )
            left =
            (callparan, resultdef = LongWord = "DWord", pos = (88,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = LongWord = "DWord", pos = (88,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = SHADERTYPE
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (89,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;const PChar;const PGLint);CDecl>", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLSHADERSOURCE
         )
         left =
         (callparan, resultdef = PGLint = "^LongInt", pos = (89,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (niln, resultdef = PGLint = "^LongInt", pos = (89,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            )

         )
         (callparan, resultdef = PChar = "^Char", pos = (89,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = PChar = "^Char", pos = (89,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
               (addrn, resultdef = Pointer = "^untyped", pos = (89,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (89,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                     nil
                     symbol = SOURCE
                  )
               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (89,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongInt = "LongInt", pos = (89,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 1
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (89,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = LongWord = "DWord", pos = (89,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
               (loadn, resultdef = LongWord = "DWord", pos = (89,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = result
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (90,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (90,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (90,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLCOMPILESHADER
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (90,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = LongWord = "DWord", pos = (90,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
               (loadn, resultdef = LongWord = "DWord", pos = (90,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = result
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (91,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (91,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (91,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLGETSHADERIV
         )
         left =
         (callparan, resultdef = PGLint = "^LongInt", pos = (91,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = PGLint = "^LongInt", pos = (91,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
               (addrn, resultdef = Pointer = "^untyped", pos = (91,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (loadn, resultdef = LongInt = "LongInt", pos = (91,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                     nil
                     symbol = SHADERVALID
                  )
               )
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (91,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (91,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 35713
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (91,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = LongWord = "DWord", pos = (91,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
               (loadn, resultdef = LongWord = "DWord", pos = (91,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = result
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (103,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (ifn, resultdef = $void = "untyped", pos = (92,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (equaln, resultdef = Boolean = "Boolean", pos = (92,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongInt = "LongInt", pos = (92,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = SHADERVALID
            )
            (ordconstn, resultdef = LongInt = "LongInt", pos = (92,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )
         )
         (blockn, resultdef = $void = "untyped", pos = (93,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (statementn, resultdef = <nil>, pos = (94,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = $void = "untyped", pos = (94,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (94,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = GLGETSHADERIV
                  )
                  left =
                  (callparan, resultdef = PGLint = "^LongInt", pos = (94,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = PGLint = "^LongInt", pos = (94,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                        (addrn, resultdef = Pointer = "^untyped", pos = (94,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (94,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                              (loadparentfpn, resultdef = <nil>, pos = (94,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 nil
                              )
                              symbol = ERRORLENGTH
                           )
                        )
                     )

                  )
                  (callparan, resultdef = LongWord = "DWord", pos = (94,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongWord = "DWord", pos = (94,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 35716
                     )

                  )
                  (callparan, resultdef = LongWord = "DWord", pos = (94,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = LongWord = "DWord", pos = (94,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
                        (loadn, resultdef = LongWord = "DWord", pos = (94,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                           symbol = result
                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (95,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (inlinen, resultdef = $void = "untyped", pos = (95,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (callparan, resultdef = LongInt = "LongInt", pos = (95,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = Int64 = "Int64", pos = (95,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                        (loadn, resultdef = LongInt = "LongInt", pos = (95,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                           (loadparentfpn, resultdef = <nil>, pos = (95,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                           )
                           symbol = ERRORLENGTH
                        )
                     )

                  )
                  (callparan, resultdef = AnsiString = "AnsiString", pos = (95,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (95,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                        (loadparentfpn, resultdef = <nil>, pos = (95,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                        )
                        symbol = ERRORTEXT
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (96,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = $void = "untyped", pos = (96,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;PGLsizei;PChar);CDecl>", pos = (96,2), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = GLGETSHADERINFOLOG
                  )
                  left =
                  (callparan, resultdef = PChar = "^Char", pos = (96,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = PChar = "^Char", pos = (96,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                        (addrn, resultdef = Pointer = "^untyped", pos = (96,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (vecn, resultdef = Char = "Char", pos = (96,66), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                              (loadn, resultdef = AnsiString = "AnsiString", pos = (96,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 (loadparentfpn, resultdef = <nil>, pos = (96,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                 )
                                 symbol = ERRORTEXT
                              )
                              (ordconstn, resultdef = QWord = "QWord", pos = (96,67), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 value = 1
                              )
                           )
                        )
                     )

                  )
                  (callparan, resultdef = PGLsizei = "^LongInt", pos = (96,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = PGLsizei = "^LongInt", pos = (96,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                        (addrn, resultdef = Pointer = "^untyped", pos = (96,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (96,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                              (loadparentfpn, resultdef = <nil>, pos = (96,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 nil
                              )
                              symbol = ERRORLENGTH
                           )
                        )
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (96,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = LongInt = "LongInt", pos = (96,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                        (loadparentfpn, resultdef = <nil>, pos = (96,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                        )
                        symbol = ERRORLENGTH
                     )

                  )
                  (callparan, resultdef = LongWord = "DWord", pos = (96,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = LongWord = "DWord", pos = (96,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
                        (loadn, resultdef = LongWord = "DWord", pos = (96,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                           symbol = result
                        )
                     )

                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (101,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ifn, resultdef = $void = "untyped", pos = (97,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (unequaln, resultdef = Boolean = "Boolean", pos = (97,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (typeconvn, resultdef = LongWord = "DWord", pos = (97,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
                        (loadn, resultdef = LongWord = "DWord", pos = (97,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                           symbol = result
                        )
                     )
                     (ordconstn, resultdef = LongWord = "DWord", pos = (97,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (98,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (statementn, resultdef = <nil>, pos = (99,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (99,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (99,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLDELETESHADER
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (99,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (typeconvn, resultdef = LongWord = "DWord", pos = (99,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
                                 (loadn, resultdef = LongWord = "DWord", pos = (99,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                    symbol = result
                                 )
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (100,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (assignn, resultdef = $void = "untyped", pos = (100,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (typeconvn, resultdef = LongWord = "DWord", pos = (100,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
                              (loadn, resultdef = LongWord = "DWord", pos = (100,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                                 nil
                                 symbol = result
                              )
                           )
                           (ordconstn, resultdef = LongWord = "DWord", pos = (100,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              value = 0
                           )
                        )

                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (102,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (assignn, resultdef = $void = "untyped", pos = (102,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (102,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = OPENGLERRORS
                  )
                  (addn, resultdef = AnsiString = "AnsiString", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (addn, resultdef = AnsiString = "AnsiString", pos = (102,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (loadn, resultdef = AnsiString = "AnsiString", pos = (102,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                           symbol = OPENGLERRORS
                        )
                        (loadn, resultdef = AnsiString = "AnsiString", pos = (102,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                           (loadparentfpn, resultdef = <nil>, pos = (102,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                           )
                           symbol = ERRORTEXT
                        )
                     )
                     (stringconstn, resultdef = AnsiString = "AnsiString", pos = (102,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     )
                  )
               )

            )
         )
         nil
         nil
      )

   )
)

*******************************************************************************
after parsing
PrepareGL:Boolean;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (106,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (typeconvn, resultdef = Boolean = "Boolean", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
            (loadn, resultdef = Boolean = "Boolean", pos = (106,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = result
            )
         )
         (ordconstn, resultdef = Boolean = "Boolean", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            value = 0
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (153,79), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (ifn, resultdef = $void = "untyped", pos = (107,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (calln, resultdef = Boolean = "Boolean", pos = (107,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = Load_GL_version_2_0:Boolean;
         )
         (blockn, resultdef = $void = "untyped", pos = (108,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (statementn, resultdef = <nil>, pos = (114,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ifn, resultdef = $void = "untyped", pos = (109,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (unequaln, resultdef = Boolean = "Boolean", pos = (109,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = LongWord = "DWord", pos = (109,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                        nil
                        symbol = SHADERPROGRAM
                     )
                     (ordconstn, resultdef = LongWord = "DWord", pos = (109,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (110,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (statementn, resultdef = <nil>, pos = (111,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (111,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (111,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLDELETESHADER
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (111,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (111,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = VERTEXSHADER
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (112,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (112,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (112,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLDELETESHADER
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (112,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (112,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = FRAGMENTSHADER
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (113,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (113,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (113,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLDELETEPROGRAM
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (113,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (113,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = SHADERPROGRAM
                              )

                           )
                        )

                     )
                  )
                  nil
                  nil
               )

            )
            (statementn, resultdef = <nil>, pos = (115,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (assignn, resultdef = $void = "untyped", pos = (115,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (loadn, resultdef = LongWord = "DWord", pos = (115,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                     nil
                     symbol = SHADERPROGRAM
                  )
                  (calln, resultdef = LongWord = "DWord", pos = (115,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     proc = <nil>
                     right =
                     (loadn, resultdef = <no type symbol> = "<procedure variable type of function:DWord;CDecl>", pos = (115,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = GLCREATEPROGRAM
                     )
                  )
               )

            )
            (statementn, resultdef = <nil>, pos = (150,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ifn, resultdef = $void = "untyped", pos = (116,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (equaln, resultdef = Boolean = "Boolean", pos = (116,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = LongWord = "DWord", pos = (116,10), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                        nil
                        symbol = SHADERPROGRAM
                     )
                     (ordconstn, resultdef = LongWord = "DWord", pos = (116,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (117,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (statementn, resultdef = <nil>, pos = (118,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (assignn, resultdef = $void = "untyped", pos = (118,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (loadn, resultdef = AnsiString = "AnsiString", pos = (118,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                              nil
                              symbol = OPENGLERRORS
                           )
                           (addn, resultdef = AnsiString = "AnsiString", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (addn, resultdef = AnsiString = "AnsiString", pos = (118,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (loadn, resultdef = AnsiString = "AnsiString", pos = (118,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                    symbol = OPENGLERRORS
                                 )
                                 (loadn, resultdef = AnsiString = "AnsiString", pos = (118,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                    symbol = ERRORTEXT
                                 )
                              )
                              (stringconstn, resultdef = AnsiString = "AnsiString", pos = (118,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (119,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (exitn, resultdef = $void = "untyped", pos = (119,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           nil
                        )

                     )
                  )
                  (blockn, resultdef = $void = "untyped", pos = (122,9), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (statementn, resultdef = <nil>, pos = (123,93), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (assignn, resultdef = $void = "untyped", pos = (123,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (loadn, resultdef = LongWord = "DWord", pos = (123,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                              nil
                              symbol = VERTEXSHADER
                           )
                           (calln, resultdef = LongWord = "DWord", pos = (123,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              proc = CreateShader(<^untyped>;LongWord;AnsiString):DWord is nested;
                              left =
                              (callparan, resultdef = AnsiString = "AnsiString", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = AnsiString = "AnsiString", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = LoadStringResource(<^untyped>;<var AnsiString>;AnsiString):AnsiString is nested;
                                    left =
                                    (callparan, resultdef = AnsiString = "AnsiString", pos = (123,91), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (stringconstn, resultdef = AnsiString = "AnsiString", pos = (123,91), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )

                                    )
                                    (callparan, resultdef = <nil>, pos = (123,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (nothingn, resultdef = $void = "untyped", pos = (123,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )

                                    )
                                    (callparan, resultdef = <nil>, pos = (123,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (nothingn, resultdef = $void = "untyped", pos = (123,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )

                                    )
                                 )

                              )
                              (callparan, resultdef = LongWord = "DWord", pos = (123,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (ordconstn, resultdef = LongWord = "DWord", pos = (123,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    value = 35633
                                 )

                              )
                              (callparan, resultdef = <nil>, pos = (123,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (nothingn, resultdef = $void = "untyped", pos = (123,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 )

                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (128,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (ifn, resultdef = $void = "untyped", pos = (124,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (equaln, resultdef = Boolean = "Boolean", pos = (124,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (124,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = VERTEXSHADER
                              )
                              (ordconstn, resultdef = LongWord = "DWord", pos = (124,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 value = 0
                              )
                           )
                           (blockn, resultdef = $void = "untyped", pos = (125,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (statementn, resultdef = <nil>, pos = (126,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (126,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (126,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLDELETEPROGRAM
                                    )
                                    left =
                                    (callparan, resultdef = LongWord = "DWord", pos = (126,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (126,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = SHADERPROGRAM
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (127,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (exitn, resultdef = $void = "untyped", pos = (127,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                 )

                              )
                           )
                           nil
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (129,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (129,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (129,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLATTACHSHADER
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (129,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (129,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = VERTEXSHADER
                              )

                           )
                           (callparan, resultdef = LongWord = "DWord", pos = (129,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (129,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = SHADERPROGRAM
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (130,99), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (assignn, resultdef = $void = "untyped", pos = (130,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (loadn, resultdef = LongWord = "DWord", pos = (130,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                              nil
                              symbol = FRAGMENTSHADER
                           )
                           (calln, resultdef = LongWord = "DWord", pos = (130,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              proc = CreateShader(<^untyped>;LongWord;AnsiString):DWord is nested;
                              left =
                              (callparan, resultdef = AnsiString = "AnsiString", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = AnsiString = "AnsiString", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = LoadStringResource(<^untyped>;<var AnsiString>;AnsiString):AnsiString is nested;
                                    left =
                                    (callparan, resultdef = AnsiString = "AnsiString", pos = (130,97), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (stringconstn, resultdef = AnsiString = "AnsiString", pos = (130,97), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )

                                    )
                                    (callparan, resultdef = <nil>, pos = (130,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (nothingn, resultdef = $void = "untyped", pos = (130,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )

                                    )
                                    (callparan, resultdef = <nil>, pos = (130,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (nothingn, resultdef = $void = "untyped", pos = (130,62), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )

                                    )
                                 )

                              )
                              (callparan, resultdef = LongWord = "DWord", pos = (130,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (ordconstn, resultdef = LongWord = "DWord", pos = (130,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    value = 35632
                                 )

                              )
                              (callparan, resultdef = <nil>, pos = (130,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (nothingn, resultdef = $void = "untyped", pos = (130,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 )

                              )
                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (136,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (ifn, resultdef = $void = "untyped", pos = (131,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (equaln, resultdef = Boolean = "Boolean", pos = (131,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (131,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = FRAGMENTSHADER
                              )
                              (ordconstn, resultdef = LongWord = "DWord", pos = (131,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 value = 0
                              )
                           )
                           (blockn, resultdef = $void = "untyped", pos = (132,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (statementn, resultdef = <nil>, pos = (133,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (133,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (133,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLDELETESHADER
                                    )
                                    left =
                                    (callparan, resultdef = LongWord = "DWord", pos = (133,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (133,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = VERTEXSHADER
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (134,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (134,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (134,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLDELETEPROGRAM
                                    )
                                    left =
                                    (callparan, resultdef = LongWord = "DWord", pos = (134,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (134,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = SHADERPROGRAM
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (135,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (exitn, resultdef = $void = "untyped", pos = (135,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                 )

                              )
                           )
                           nil
                           nil
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (137,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (137,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (137,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLATTACHSHADER
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (137,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (137,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = FRAGMENTSHADER
                              )

                           )
                           (callparan, resultdef = LongWord = "DWord", pos = (137,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (137,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = SHADERPROGRAM
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (138,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (138,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLLINKPROGRAM
                           )
                           left =
                           (callparan, resultdef = LongWord = "DWord", pos = (138,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (138,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = SHADERPROGRAM
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (139,65), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (calln, resultdef = $void = "untyped", pos = (139,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (139,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              nil
                              symbol = GLGETPROGRAMIV
                           )
                           left =
                           (callparan, resultdef = PGLint = "^LongInt", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (typeconvn, resultdef = PGLint = "^LongInt", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                                 (addrn, resultdef = Pointer = "^untyped", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (typeconvn, resultdef = Boolean = "Boolean", pos = (139,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken,nf_absolute], convtype = tc_equal
                                       (loadn, resultdef = Boolean = "Boolean", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                                          nil
                                          symbol = result
                                       )
                                    )
                                 )
                              )

                           )
                           (callparan, resultdef = LongWord = "DWord", pos = (139,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (ordconstn, resultdef = LongWord = "DWord", pos = (139,55), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 value = 35714
                              )

                           )
                           (callparan, resultdef = LongWord = "DWord", pos = (139,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (loadn, resultdef = LongWord = "DWord", pos = (139,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                 nil
                                 symbol = SHADERPROGRAM
                              )

                           )
                        )

                     )
                     (statementn, resultdef = <nil>, pos = (149,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (ifn, resultdef = $void = "untyped", pos = (140,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                           (notn, resultdef = Boolean = "Boolean", pos = (140,14), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (typeconvn, resultdef = Boolean = "Boolean", pos = (140,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
                                 (loadn, resultdef = Boolean = "Boolean", pos = (140,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    nil
                                    symbol = result
                                 )
                              )
                           )
                           (blockn, resultdef = $void = "untyped", pos = (141,13), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (statementn, resultdef = <nil>, pos = (142,71), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (142,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (142,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLGETPROGRAMIV
                                    )
                                    left =
                                    (callparan, resultdef = PGLint = "^LongInt", pos = (142,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (typeconvn, resultdef = PGLint = "^LongInt", pos = (142,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                                          (addrn, resultdef = Pointer = "^untyped", pos = (142,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (142,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                                                nil
                                                symbol = ERRORLENGTH
                                             )
                                          )
                                       )

                                    )
                                    (callparan, resultdef = LongWord = "DWord", pos = (142,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (ordconstn, resultdef = LongWord = "DWord", pos = (142,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                          value = 35716
                                       )

                                    )
                                    (callparan, resultdef = LongWord = "DWord", pos = (142,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (142,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = SHADERPROGRAM
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (143,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (inlinen, resultdef = $void = "untyped", pos = (143,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (callparan, resultdef = LongInt = "LongInt", pos = (143,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (typeconvn, resultdef = Int64 = "Int64", pos = (143,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                                          (loadn, resultdef = LongInt = "LongInt", pos = (143,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             nil
                                             symbol = ERRORLENGTH
                                          )
                                       )

                                    )
                                    (callparan, resultdef = AnsiString = "AnsiString", pos = (143,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = AnsiString = "AnsiString", pos = (143,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                                          nil
                                          symbol = ERRORTEXT
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (144,84), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (144,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;PGLsizei;PChar);CDecl>", pos = (144,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLGETPROGRAMINFOLOG
                                    )
                                    left =
                                    (callparan, resultdef = PChar = "^Char", pos = (144,83), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (typeconvn, resultdef = PChar = "^Char", pos = (144,83), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                                          (addrn, resultdef = Pointer = "^untyped", pos = (144,83), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             (vecn, resultdef = Char = "Char", pos = (144,80), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                                (loadn, resultdef = AnsiString = "AnsiString", pos = (144,71), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                   nil
                                                   symbol = ERRORTEXT
                                                )
                                                (ordconstn, resultdef = QWord = "QWord", pos = (144,81), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                   value = 1
                                                )
                                             )
                                          )
                                       )

                                    )
                                    (callparan, resultdef = PGLsizei = "^LongInt", pos = (144,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (typeconvn, resultdef = PGLsizei = "^LongInt", pos = (144,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                                          (addrn, resultdef = Pointer = "^untyped", pos = (144,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (144,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                                                nil
                                                symbol = ERRORLENGTH
                                             )
                                          )
                                       )

                                    )
                                    (callparan, resultdef = LongInt = "LongInt", pos = (144,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongInt = "LongInt", pos = (144,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                          nil
                                          symbol = ERRORLENGTH
                                       )

                                    )
                                    (callparan, resultdef = LongWord = "DWord", pos = (144,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (144,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = SHADERPROGRAM
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (145,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (assignn, resultdef = $void = "untyped", pos = (145,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (loadn, resultdef = AnsiString = "AnsiString", pos = (145,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                                       nil
                                       symbol = OPENGLERRORS
                                    )
                                    (addn, resultdef = AnsiString = "AnsiString", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (addn, resultdef = AnsiString = "AnsiString", pos = (145,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                          (loadn, resultdef = AnsiString = "AnsiString", pos = (145,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             nil
                                             symbol = OPENGLERRORS
                                          )
                                          (loadn, resultdef = AnsiString = "AnsiString", pos = (145,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             nil
                                             symbol = ERRORTEXT
                                          )
                                       )
                                       (stringconstn, resultdef = AnsiString = "AnsiString", pos = (145,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       )
                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (146,43), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (146,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (146,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLDELETESHADER
                                    )
                                    left =
                                    (callparan, resultdef = LongWord = "DWord", pos = (146,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (146,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = VERTEXSHADER
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (147,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (147,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (147,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLDELETESHADER
                                    )
                                    left =
                                    (callparan, resultdef = LongWord = "DWord", pos = (147,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (147,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = FRAGMENTSHADER
                                       )

                                    )
                                 )

                              )
                              (statementn, resultdef = <nil>, pos = (148,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (calln, resultdef = $void = "untyped", pos = (148,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    proc = <nil>
                                    right =
                                    (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (148,15), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       nil
                                       symbol = GLDELETEPROGRAM
                                    )
                                    left =
                                    (callparan, resultdef = LongWord = "DWord", pos = (148,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (loadn, resultdef = LongWord = "DWord", pos = (148,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                                          nil
                                          symbol = SHADERPROGRAM
                                       )

                                    )
                                 )

                              )
                           )
                           nil
                           nil
                        )

                     )
                  )
                  nil
               )

            )
         )
         (assignn, resultdef = $void = "untyped", pos = (153,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = AnsiString = "AnsiString", pos = (153,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
               nil
               symbol = OPENGLERRORS
            )
            (addn, resultdef = AnsiString = "AnsiString", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (addn, resultdef = AnsiString = "AnsiString", pos = (153,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (loadn, resultdef = AnsiString = "AnsiString", pos = (153,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     nil
                     symbol = OPENGLERRORS
                  )
                  (stringconstn, resultdef = AnsiString = "AnsiString", pos = (153,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  )
               )
               (stringconstn, resultdef = AnsiString = "AnsiString", pos = (153,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               )
            )
         )
         nil
      )

   )
)

*******************************************************************************
after the firstpass
PrepareGL:Boolean;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = ShortInt = "ShortInt", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_bool_2_int
            (loadn, resultdef = Boolean = "Boolean", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = result
            )
         )
         (ordconstn, resultdef = ShortInt = "ShortInt", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 85
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (loadn, resultdef = LongInt = "LongInt", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
            nil
            symbol = ERRORLENGTH
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (105,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (106,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (typeconvn, resultdef = Boolean = "Boolean", pos = (106,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                  (loadn, resultdef = Boolean = "Boolean", pos = (106,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                     nil
                     symbol = result
                  )
               )
               (ordconstn, resultdef = Boolean = "Boolean", pos = (106,13), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                  value = 0
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (153,79), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (ifn, resultdef = $void = "untyped", pos = (107,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (calln, resultdef = Boolean = "Boolean", pos = (107,6), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                  proc = Load_GL_version_2_0:Boolean;
               )
               (blockn, resultdef = $void = "untyped", pos = (108,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                  (statementn, resultdef = <nil>, pos = (114,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (ifn, resultdef = $void = "untyped", pos = (109,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        (unequaln, resultdef = Boolean = "Boolean", pos = (109,23), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                           (loadn, resultdef = LongWord = "DWord", pos = (109,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                              nil
                              symbol = SHADERPROGRAM
                           )
                           (ordconstn, resultdef = LongWord = "DWord", pos = (109,25), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )
                        )
                        (blockn, resultdef = $void = "untyped", pos = (110,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                           (statementn, resultdef = <nil>, pos = (111,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (111,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (111,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLDELETESHADER
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (111,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (111,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = VERTEXSHADER
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (112,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (112,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (112,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLDELETESHADER
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (112,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (112,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = FRAGMENTSHADER
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (113,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (113,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (113,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLDELETEPROGRAM
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (113,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (113,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = SHADERPROGRAM
                                    )

                                 )
                              )

                           )
                        )
                        nil
                        nil
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (115,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (assignn, resultdef = $void = "untyped", pos = (115,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        (loadn, resultdef = LongWord = "DWord", pos = (115,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                           nil
                           symbol = SHADERPROGRAM
                        )
                        (calln, resultdef = LongWord = "DWord", pos = (115,39), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                           proc = <nil>
                           right =
                           (loadn, resultdef = <no type symbol> = "<procedure variable type of function:DWord;CDecl>", pos = (115,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = GLCREATEPROGRAM
                           )
                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (150,12), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (ifn, resultdef = $void = "untyped", pos = (116,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        (equaln, resultdef = Boolean = "Boolean", pos = (116,23), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                           (loadn, resultdef = LongWord = "DWord", pos = (116,10), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                              nil
                              symbol = SHADERPROGRAM
                           )
                           (ordconstn, resultdef = LongWord = "DWord", pos = (116,24), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )
                        )
                        (blockn, resultdef = $void = "untyped", pos = (117,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                           (statementn, resultdef = <nil>, pos = (118,60), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = $fpc_ansistr_concat_multi(var RawByteString;const {Open} Array Of RawByteString;<const Int64>;Word);
                                 left =
                                 (callparan, resultdef = <no type symbol> = "{Open} Array Of RawByteString", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                                    (typeconvn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_address_taken], convtype = tc_equal
                                       (arrayconstructn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_novariaallowed]
                                          (loadn, resultdef = RawByteString = "AnsiString", pos = (118,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = OPENGLERRORS
                                          )
                                          (arrayconstructn, resultdef = <nil>, pos = (118,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                             (loadn, resultdef = RawByteString = "AnsiString", pos = (118,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                nil
                                                symbol = ERRORTEXT
                                             )
                                             (arrayconstructn, resultdef = <nil>, pos = (118,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                (stringconstn, resultdef = AnsiString = "AnsiString", pos = (118,50), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                )
                                                nil
                                             )
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = RawByteString = "AnsiString", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                       nil
                                       symbol = OPENGLERRORS
                                    )

                                 )
                                 (callparan, resultdef = Word = "Word", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                    (ordconstn, resultdef = Word = "Word", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                       value = 0
                                    )

                                 )
                                 (callparan, resultdef = Int64 = "Int64", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                    (ordconstn, resultdef = Int64 = "Int64", pos = (118,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit]
                                       value = 2
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (119,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (exitn, resultdef = $void = "untyped", pos = (119,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 nil
                              )

                           )
                        )
                        (blockn, resultdef = $void = "untyped", pos = (122,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                           (statementn, resultdef = <nil>, pos = (123,93), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (assignn, resultdef = $void = "untyped", pos = (123,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (loadn, resultdef = LongWord = "DWord", pos = (123,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                    nil
                                    symbol = VERTEXSHADER
                                 )
                                 (calln, resultdef = LongWord = "DWord", pos = (123,27), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                    proc = CreateShader(<^untyped>;LongWord;AnsiString):DWord is nested;
                                    left =
                                    (callparan, resultdef = AnsiString = "AnsiString", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                       (calln, resultdef = AnsiString = "AnsiString", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          proc = LoadStringResource(<^untyped>;<var AnsiString>;AnsiString):AnsiString is nested;
                                          callinitblock =
                                          (blockn, resultdef = $void = "untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                             (statementn, resultdef = $void = "untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                (tempcreaten, resultdef = $void = "untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                                   size = 8, temptypedef = AnsiString = "AnsiString", tempinfo = $00007F563D1D5AC0
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                          )
                                          callcleanupblock =
                                          (blockn, resultdef = $void = "untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                             (statementn, resultdef = $void = "untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                (tempdeleten, resultdef = $void = "untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                   release_to_normal: TRUE, temptypedef = AnsiString = "AnsiString", temptype = tt_persistent, tempinfo = $00007F563D1D5AC0
                                                )

                                             )
                                          )
                                          left =
                                          (callparan, resultdef = AnsiString = "AnsiString", pos = (123,91), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (stringconstn, resultdef = AnsiString = "AnsiString", pos = (123,91), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                             )

                                          )
                                          (callparan, resultdef = <nil>, pos = (123,58), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (temprefn, resultdef = AnsiString = "AnsiString", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret]
                                                temptypedef = AnsiString = "AnsiString", tempinfo = $00007F563D1D5AC0
                                             )

                                          )
                                          (callparan, resultdef = <nil>, pos = (123,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (123,92), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                nil
                                             )

                                          )
                                       )

                                    )
                                    (callparan, resultdef = <nil>, pos = (123,27), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                       (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (123,27), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                          nil
                                       )

                                    )
                                    (callparan, resultdef = LongWord = "DWord", pos = (123,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                       (ordconstn, resultdef = LongWord = "DWord", pos = (123,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                          value = 35633
                                       )

                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (128,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (ifn, resultdef = $void = "untyped", pos = (124,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (equaln, resultdef = Boolean = "Boolean", pos = (124,26), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                                    (loadn, resultdef = LongWord = "DWord", pos = (124,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = VERTEXSHADER
                                    )
                                    (ordconstn, resultdef = LongWord = "DWord", pos = (124,27), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                       value = 0
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (125,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                    (statementn, resultdef = <nil>, pos = (126,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (126,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (126,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLDELETEPROGRAM
                                          )
                                          left =
                                          (callparan, resultdef = LongWord = "DWord", pos = (126,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (126,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = SHADERPROGRAM
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (127,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (exitn, resultdef = $void = "untyped", pos = (127,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          nil
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (129,54), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (129,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (129,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLATTACHSHADER
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (129,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (129,53), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = VERTEXSHADER
                                    )

                                 )
                                 (callparan, resultdef = LongWord = "DWord", pos = (129,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (129,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = SHADERPROGRAM
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (130,99), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (assignn, resultdef = $void = "untyped", pos = (130,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (loadn, resultdef = LongWord = "DWord", pos = (130,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                    nil
                                    symbol = FRAGMENTSHADER
                                 )
                                 (calln, resultdef = LongWord = "DWord", pos = (130,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                    proc = CreateShader(<^untyped>;LongWord;AnsiString):DWord is nested;
                                    left =
                                    (callparan, resultdef = AnsiString = "AnsiString", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                       (calln, resultdef = AnsiString = "AnsiString", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          proc = LoadStringResource(<^untyped>;<var AnsiString>;AnsiString):AnsiString is nested;
                                          callinitblock =
                                          (blockn, resultdef = $void = "untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                             (statementn, resultdef = $void = "untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                (tempcreaten, resultdef = $void = "untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                                   size = 8, temptypedef = AnsiString = "AnsiString", tempinfo = $00007F563D1D5B40
                                                   tempinit =
                                                   nil
                                                )

                                             )
                                          )
                                          callcleanupblock =
                                          (blockn, resultdef = $void = "untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                             (statementn, resultdef = $void = "untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                                (tempdeleten, resultdef = $void = "untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                                   release_to_normal: TRUE, temptypedef = AnsiString = "AnsiString", temptype = tt_persistent, tempinfo = $00007F563D1D5B40
                                                )

                                             )
                                          )
                                          left =
                                          (callparan, resultdef = AnsiString = "AnsiString", pos = (130,97), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (stringconstn, resultdef = AnsiString = "AnsiString", pos = (130,97), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                             )

                                          )
                                          (callparan, resultdef = <nil>, pos = (130,62), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (temprefn, resultdef = AnsiString = "AnsiString", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret]
                                                temptypedef = AnsiString = "AnsiString", tempinfo = $00007F563D1D5B40
                                             )

                                          )
                                          (callparan, resultdef = <nil>, pos = (130,62), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (130,98), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                nil
                                             )

                                          )
                                       )

                                    )
                                    (callparan, resultdef = <nil>, pos = (130,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                       (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (130,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                          nil
                                       )

                                    )
                                    (callparan, resultdef = LongWord = "DWord", pos = (130,60), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                       (ordconstn, resultdef = LongWord = "DWord", pos = (130,60), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                          value = 35632
                                       )

                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (136,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (ifn, resultdef = $void = "untyped", pos = (131,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (equaln, resultdef = Boolean = "Boolean", pos = (131,28), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                                    (loadn, resultdef = LongWord = "DWord", pos = (131,14), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = FRAGMENTSHADER
                                    )
                                    (ordconstn, resultdef = LongWord = "DWord", pos = (131,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                       value = 0
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (132,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                    (statementn, resultdef = <nil>, pos = (133,43), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (133,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (133,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLDELETESHADER
                                          )
                                          left =
                                          (callparan, resultdef = LongWord = "DWord", pos = (133,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (133,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = VERTEXSHADER
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (134,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (134,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (134,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLDELETEPROGRAM
                                          )
                                          left =
                                          (callparan, resultdef = LongWord = "DWord", pos = (134,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (134,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = SHADERPROGRAM
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (135,19), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (exitn, resultdef = $void = "untyped", pos = (135,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          nil
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (137,56), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (137,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (137,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLATTACHSHADER
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (137,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (137,55), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = FRAGMENTSHADER
                                    )

                                 )
                                 (callparan, resultdef = LongWord = "DWord", pos = (137,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (137,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = SHADERPROGRAM
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (138,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (138,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (138,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLLINKPROGRAM
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (138,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (138,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = SHADERPROGRAM
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (139,65), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (139,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (139,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLGETPROGRAMIV
                                 )
                                 left =
                                 (callparan, resultdef = PGLint = "^LongInt", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                    (typeconvn, resultdef = PGLint = "^LongInt", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                                       (addrn, resultdef = Pointer = "^untyped", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                          (typeconvn, resultdef = Boolean = "Boolean", pos = (139,58), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken,nf_absolute], convtype = tc_equal
                                             (loadn, resultdef = Boolean = "Boolean", pos = (139,64), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                                                nil
                                                symbol = result
                                             )
                                          )
                                       )
                                    )

                                 )
                                 (callparan, resultdef = LongWord = "DWord", pos = (139,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (loadn, resultdef = LongWord = "DWord", pos = (139,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       nil
                                       symbol = SHADERPROGRAM
                                    )

                                 )
                                 (callparan, resultdef = LongWord = "DWord", pos = (139,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                    (ordconstn, resultdef = LongWord = "DWord", pos = (139,55), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                       value = 35714
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (149,16), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (ifn, resultdef = $void = "untyped", pos = (140,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (notn, resultdef = Boolean = "Boolean", pos = (140,14), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                                    (typeconvn, resultdef = Boolean = "Boolean", pos = (140,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                                       (loadn, resultdef = Boolean = "Boolean", pos = (140,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          nil
                                          symbol = result
                                       )
                                    )
                                 )
                                 (blockn, resultdef = $void = "untyped", pos = (141,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                    (statementn, resultdef = <nil>, pos = (142,71), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (142,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (142,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLGETPROGRAMIV
                                          )
                                          left =
                                          (callparan, resultdef = PGLint = "^LongInt", pos = (142,70), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (typeconvn, resultdef = PGLint = "^LongInt", pos = (142,70), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                                                (addrn, resultdef = Pointer = "^untyped", pos = (142,70), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                   (loadn, resultdef = LongInt = "LongInt", pos = (142,59), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                                      nil
                                                      symbol = ERRORLENGTH
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongWord = "DWord", pos = (142,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (142,36), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = SHADERPROGRAM
                                             )

                                          )
                                          (callparan, resultdef = LongWord = "DWord", pos = (142,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                             (ordconstn, resultdef = LongWord = "DWord", pos = (142,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                                value = 35716
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (143,48), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (143,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = $fpc_ansistr_setlength(var RawByteString;Int64;Word);
                                          left =
                                          (callparan, resultdef = Int64 = "Int64", pos = (143,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (typeconvn, resultdef = Int64 = "Int64", pos = (143,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_int_2_int
                                                (loadn, resultdef = LongInt = "LongInt", pos = (143,47), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                   nil
                                                   symbol = ERRORLENGTH
                                                )
                                             )

                                          )
                                          (callparan, resultdef = RawByteString = "AnsiString", pos = (143,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = RawByteString = "AnsiString", pos = (143,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                                nil
                                                symbol = ERRORTEXT
                                             )

                                          )
                                          (callparan, resultdef = Word = "Word", pos = (143,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                             (ordconstn, resultdef = Word = "Word", pos = (143,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                                value = 0
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (144,84), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (144,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;PGLsizei;PChar);CDecl>", pos = (144,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLGETPROGRAMINFOLOG
                                          )
                                          left =
                                          (callparan, resultdef = PChar = "^Char", pos = (144,83), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (typeconvn, resultdef = PChar = "^Char", pos = (144,83), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                                                (addrn, resultdef = Pointer = "^untyped", pos = (144,83), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                   (vecn, resultdef = Char = "Char", pos = (144,80), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                      (loadn, resultdef = AnsiString = "AnsiString", pos = (144,71), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                         nil
                                                         symbol = ERRORTEXT
                                                      )
                                                      (ordconstn, resultdef = QWord = "QWord", pos = (144,81), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                                         value = 1
                                                      )
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = PGLsizei = "^LongInt", pos = (144,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                                             (typeconvn, resultdef = PGLsizei = "^LongInt", pos = (144,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                                                (addrn, resultdef = Pointer = "^untyped", pos = (144,68), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                   (loadn, resultdef = LongInt = "LongInt", pos = (144,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                                      nil
                                                      symbol = ERRORLENGTH
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = LongInt = "LongInt", pos = (144,54), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongInt = "LongInt", pos = (144,54), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                nil
                                                symbol = ERRORLENGTH
                                             )

                                          )
                                          (callparan, resultdef = LongWord = "DWord", pos = (144,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (144,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = SHADERPROGRAM
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (145,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = $fpc_ansistr_concat_multi(var RawByteString;const {Open} Array Of RawByteString;<const Int64>;Word);
                                          left =
                                          (callparan, resultdef = <no type symbol> = "{Open} Array Of RawByteString", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                                             (typeconvn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_address_taken], convtype = tc_equal
                                                (arrayconstructn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_novariaallowed]
                                                   (loadn, resultdef = RawByteString = "AnsiString", pos = (145,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                      nil
                                                      symbol = OPENGLERRORS
                                                   )
                                                   (arrayconstructn, resultdef = <nil>, pos = (145,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                      (loadn, resultdef = RawByteString = "AnsiString", pos = (145,37), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                                         nil
                                                         symbol = ERRORTEXT
                                                      )
                                                      (arrayconstructn, resultdef = <nil>, pos = (145,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                                         (stringconstn, resultdef = AnsiString = "AnsiString", pos = (145,47), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                                         )
                                                         nil
                                                      )
                                                   )
                                                )
                                             )

                                          )
                                          (callparan, resultdef = RawByteString = "AnsiString", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = RawByteString = "AnsiString", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                                nil
                                                symbol = OPENGLERRORS
                                             )

                                          )
                                          (callparan, resultdef = Word = "Word", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                             (ordconstn, resultdef = Word = "Word", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                                value = 0
                                             )

                                          )
                                          (callparan, resultdef = Int64 = "Int64", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                                             (ordconstn, resultdef = Int64 = "Int64", pos = (145,46), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit]
                                                value = 2
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (146,43), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (146,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (146,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLDELETESHADER
                                          )
                                          left =
                                          (callparan, resultdef = LongWord = "DWord", pos = (146,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (146,42), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = VERTEXSHADER
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (147,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (147,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (147,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLDELETESHADER
                                          )
                                          left =
                                          (callparan, resultdef = LongWord = "DWord", pos = (147,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (147,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = FRAGMENTSHADER
                                             )

                                          )
                                       )

                                    )
                                    (statementn, resultdef = <nil>, pos = (148,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                                       (calln, resultdef = $void = "untyped", pos = (148,15), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                          proc = <nil>
                                          right =
                                          (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (148,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                             nil
                                             symbol = GLDELETEPROGRAM
                                          )
                                          left =
                                          (callparan, resultdef = LongWord = "DWord", pos = (148,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                             (loadn, resultdef = LongWord = "DWord", pos = (148,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                                nil
                                                symbol = SHADERPROGRAM
                                             )

                                          )
                                       )

                                    )
                                 )
                                 nil
                                 nil
                              )

                           )
                        )
                        nil
                     )

                  )
               )
               (calln, resultdef = $void = "untyped", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                  proc = $fpc_ansistr_concat_multi(var RawByteString;const {Open} Array Of RawByteString;<const Int64>;Word);
                  left =
                  (callparan, resultdef = <no type symbol> = "{Open} Array Of RawByteString", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                     (typeconvn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_address_taken], convtype = tc_equal
                        (arrayconstructn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_novariaallowed]
                           (loadn, resultdef = RawByteString = "AnsiString", pos = (153,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = OPENGLERRORS
                           )
                           (arrayconstructn, resultdef = <nil>, pos = (153,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                              (stringconstn, resultdef = AnsiString = "AnsiString", pos = (153,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                              )
                              (arrayconstructn, resultdef = <nil>, pos = (153,68), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                 (stringconstn, resultdef = AnsiString = "AnsiString", pos = (153,69), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 )
                                 nil
                              )
                           )
                        )
                     )

                  )
                  (callparan, resultdef = RawByteString = "AnsiString", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                     (loadn, resultdef = RawByteString = "AnsiString", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                        nil
                        symbol = OPENGLERRORS
                     )

                  )
                  (callparan, resultdef = Word = "Word", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                     (ordconstn, resultdef = Word = "Word", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                        value = 0
                     )

                  )
                  (callparan, resultdef = Int64 = "Int64", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                     (ordconstn, resultdef = Int64 = "Int64", pos = (153,68), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit]
                        value = 2
                     )

                  )
               )
               nil
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
CreateShader(LongWord;AnsiString):DWord is nested;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = LongInt = "LongInt", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_int_2_int
            (loadn, resultdef = LongWord = "DWord", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = result
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (loadn, resultdef = LongInt = "LongInt", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
            nil
            symbol = SHADERVALID
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (87,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (88,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (88,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (typeconvn, resultdef = LongWord = "DWord", pos = (88,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                  (loadn, resultdef = LongWord = "DWord", pos = (88,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                     nil
                     symbol = result
                  )
               )
               (calln, resultdef = LongWord = "DWord", pos = (88,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord):DWord;CDecl>", pos = (88,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = GLCREATESHADER
                  )
                  left =
                  (callparan, resultdef = LongWord = "DWord", pos = (88,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                     (loadn, resultdef = LongWord = "DWord", pos = (88,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = SHADERTYPE
                     )

                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (89,44), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;const PChar;const PGLint);CDecl>", pos = (89,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLSHADERSOURCE
               )
               left =
               (callparan, resultdef = PChar = "^Char", pos = (89,38), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (typeconvn, resultdef = PChar = "^Char", pos = (89,38), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                     (addrn, resultdef = Pointer = "^untyped", pos = (89,38), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                        (loadn, resultdef = AnsiString = "AnsiString", pos = (89,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                           nil
                           symbol = SOURCE
                        )
                     )
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (89,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = LongWord = "DWord", pos = (89,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = LongWord = "DWord", pos = (89,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = PGLint = "^LongInt", pos = (89,43), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (niln, resultdef = PGLint = "^LongInt", pos = (89,43), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (89,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (89,29), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 1
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (90,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (90,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (90,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLCOMPILESHADER
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (90,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = LongWord = "DWord", pos = (90,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = LongWord = "DWord", pos = (90,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = result
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (91,59), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (91,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (91,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLGETSHADERIV
               )
               left =
               (callparan, resultdef = PGLint = "^LongInt", pos = (91,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (typeconvn, resultdef = PGLint = "^LongInt", pos = (91,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                     (addrn, resultdef = Pointer = "^untyped", pos = (91,58), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                        (loadn, resultdef = LongInt = "LongInt", pos = (91,47), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                           nil
                           symbol = SHADERVALID
                        )
                     )
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (91,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = LongWord = "DWord", pos = (91,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = LongWord = "DWord", pos = (91,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (91,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (91,44), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 35713
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (103,10), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (ifn, resultdef = $void = "untyped", pos = (92,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (equaln, resultdef = Boolean = "Boolean", pos = (92,19), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                  (loadn, resultdef = LongInt = "LongInt", pos = (92,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = SHADERVALID
                  )
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (92,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )
               )
               (blockn, resultdef = $void = "untyped", pos = (93,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                  (statementn, resultdef = <nil>, pos = (94,57), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (calln, resultdef = $void = "untyped", pos = (94,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        proc = <nil>
                        right =
                        (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord;PGLint);CDecl>", pos = (94,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           nil
                           symbol = GLGETSHADERIV
                        )
                        left =
                        (callparan, resultdef = PGLint = "^LongInt", pos = (94,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                           (typeconvn, resultdef = PGLint = "^LongInt", pos = (94,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                              (addrn, resultdef = Pointer = "^untyped", pos = (94,56), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 (loadn, resultdef = LongInt = "LongInt", pos = (94,45), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                    (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (94,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                       nil
                                    )
                                    symbol = ERRORLENGTH
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongWord = "DWord", pos = (94,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                           (typeconvn, resultdef = LongWord = "DWord", pos = (94,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                              (loadn, resultdef = LongWord = "DWord", pos = (94,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                 nil
                                 symbol = result
                              )
                           )

                        )
                        (callparan, resultdef = LongWord = "DWord", pos = (94,42), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = LongWord = "DWord", pos = (94,42), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 35716
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (95,42), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (calln, resultdef = $void = "untyped", pos = (95,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        proc = $fpc_ansistr_setlength(var RawByteString;Int64;Word);
                        left =
                        (callparan, resultdef = Int64 = "Int64", pos = (95,41), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                           (typeconvn, resultdef = Int64 = "Int64", pos = (95,41), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_int_2_int
                              (loadn, resultdef = LongInt = "LongInt", pos = (95,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                 (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (95,30), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                    nil
                                 )
                                 symbol = ERRORLENGTH
                              )
                           )

                        )
                        (callparan, resultdef = RawByteString = "AnsiString", pos = (95,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                           (loadn, resultdef = RawByteString = "AnsiString", pos = (95,28), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                              (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (95,19), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 nil
                              )
                              symbol = ERRORTEXT
                           )

                        )
                        (callparan, resultdef = Word = "Word", pos = (95,9), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = Word = "Word", pos = (95,9), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (96,70), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (calln, resultdef = $void = "untyped", pos = (96,2), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        proc = <nil>
                        right =
                        (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;PGLsizei;PChar);CDecl>", pos = (96,2), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           nil
                           symbol = GLGETSHADERINFOLOG
                        )
                        left =
                        (callparan, resultdef = PChar = "^Char", pos = (96,69), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                           (typeconvn, resultdef = PChar = "^Char", pos = (96,69), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                              (addrn, resultdef = Pointer = "^untyped", pos = (96,69), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 (vecn, resultdef = Char = "Char", pos = (96,66), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                    (loadn, resultdef = AnsiString = "AnsiString", pos = (96,57), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (96,57), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                          nil
                                       )
                                       symbol = ERRORTEXT
                                    )
                                    (ordconstn, resultdef = QWord = "QWord", pos = (96,67), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                       value = 1
                                    )
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = PGLsizei = "^LongInt", pos = (96,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                           (typeconvn, resultdef = PGLsizei = "^LongInt", pos = (96,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                              (addrn, resultdef = Pointer = "^untyped", pos = (96,54), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 (loadn, resultdef = LongInt = "LongInt", pos = (96,43), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                                    (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (96,43), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                       nil
                                    )
                                    symbol = ERRORLENGTH
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (96,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                           (loadn, resultdef = LongInt = "LongInt", pos = (96,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                              (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (96,29), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                 nil
                              )
                              symbol = ERRORLENGTH
                           )

                        )
                        (callparan, resultdef = LongWord = "DWord", pos = (96,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                           (typeconvn, resultdef = LongWord = "DWord", pos = (96,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                              (loadn, resultdef = LongWord = "DWord", pos = (96,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                 nil
                                 symbol = result
                              )
                           )

                        )
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (101,14), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (ifn, resultdef = $void = "untyped", pos = (97,9), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        (unequaln, resultdef = Boolean = "Boolean", pos = (97,18), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                           (typeconvn, resultdef = LongWord = "DWord", pos = (97,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                              (loadn, resultdef = LongWord = "DWord", pos = (97,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                 nil
                                 symbol = result
                              )
                           )
                           (ordconstn, resultdef = LongWord = "DWord", pos = (97,20), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )
                        )
                        (blockn, resultdef = $void = "untyped", pos = (98,11), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                           (statementn, resultdef = <nil>, pos = (99,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (calln, resultdef = $void = "untyped", pos = (99,6), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 proc = <nil>
                                 right =
                                 (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (99,6), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = GLDELETESHADER
                                 )
                                 left =
                                 (callparan, resultdef = LongWord = "DWord", pos = (99,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                                    (typeconvn, resultdef = LongWord = "DWord", pos = (99,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                                       (loadn, resultdef = LongWord = "DWord", pos = (99,27), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          nil
                                          symbol = result
                                       )
                                    )

                                 )
                              )

                           )
                           (statementn, resultdef = <nil>, pos = (100,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (assignn, resultdef = $void = "untyped", pos = (100,13), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (typeconvn, resultdef = LongWord = "DWord", pos = (100,13), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                                    (loadn, resultdef = LongWord = "DWord", pos = (100,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                                       nil
                                       symbol = result
                                    )
                                 )
                                 (ordconstn, resultdef = LongWord = "DWord", pos = (100,23), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                                    value = 0
                                 )
                              )

                           )
                        )
                        nil
                        nil
                     )

                  )
                  (statementn, resultdef = <nil>, pos = (102,58), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                     (calln, resultdef = $void = "untyped", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                        proc = $fpc_ansistr_concat_multi(var RawByteString;const {Open} Array Of RawByteString;<const Int64>;Word);
                        left =
                        (callparan, resultdef = <no type symbol> = "{Open} Array Of RawByteString", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                           (typeconvn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_address_taken], convtype = tc_equal
                              (arrayconstructn, resultdef = <no type symbol> = "{Array Of Const/Constant Open} Array of RawByteString", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done,nf_novariaallowed]
                                 (loadn, resultdef = RawByteString = "AnsiString", pos = (102,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                    nil
                                    symbol = OPENGLERRORS
                                 )
                                 (arrayconstructn, resultdef = <nil>, pos = (102,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                    (loadn, resultdef = RawByteString = "AnsiString", pos = (102,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                                       (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (102,38), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                          nil
                                       )
                                       symbol = ERRORTEXT
                                    )
                                    (arrayconstructn, resultdef = <nil>, pos = (102,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                                       (stringconstn, resultdef = AnsiString = "AnsiString", pos = (102,48), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                       )
                                       nil
                                    )
                                 )
                              )
                           )

                        )
                        (callparan, resultdef = RawByteString = "AnsiString", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                           (loadn, resultdef = RawByteString = "AnsiString", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                              nil
                              symbol = OPENGLERRORS
                           )

                        )
                        (callparan, resultdef = Word = "Word", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = Word = "Word", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )

                        )
                        (callparan, resultdef = Int64 = "Int64", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = Int64 = "Int64", pos = (102,47), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done,nf_explicit]
                              value = 2
                           )

                        )
                     )

                  )
               )
               nil
               nil
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
LoadStringResource(AnsiString):AnsiString is nested;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = Int64 = "Int64", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_equal
            (loadn, resultdef = TResourceStream = "TResourceStream", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = DATASTREAM
            )
         )
         (ordconstn, resultdef = Int64 = "Int64", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 6148914691236517205
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (78,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (79,74), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (loadn, resultdef = TResourceStream = "TResourceStream", pos = (79,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                  nil
                  symbol = DATASTREAM
               )
               (calln, resultdef = TResourceStream = "TResourceStream", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                  proc = constructor Create(<TResourceStream>;<Pointer>;QWord;const AnsiString;PChar);
                  methodpointer =
                  (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TResourceStream", pos = (79,19), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     (typen, resultdef = TResourceStream = "TResourceStream", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     )
                  )
                  left =
                  (callparan, resultdef = QWord = "QWord", pos = (79,51), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                     (calln, resultdef = QWord = "QWord", pos = (79,51), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                        proc = HINSTANCE:QWord;
                     )

                  )
                  (callparan, resultdef = PChar = "^Char", pos = (79,73), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                     (typeconvn, resultdef = PChar = "^Char", pos = (79,73), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_cstring_2_pchar
                        (stringconstn, resultdef = <no type symbol> = "Constant String", pos = (79,73), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done]
                        )
                     )

                  )
                  (callparan, resultdef = AnsiString = "AnsiString", pos = (79,65), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (79,65), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = RESOURCENAME
                     )

                  )
                  (callparan, resultdef = <nil>, pos = (79,74), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                     (loadvmtaddrn, resultdef = <no type symbol> = "Class Of TResourceStream", pos = (79,19), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                        (typen, resultdef = TResourceStream = "TResourceStream", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        )
                     )

                  )
                  (callparan, resultdef = <nil>, pos = (79,74), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                     (pointerconstn, resultdef = Pointer = "^untyped", pos = (79,34), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     )

                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (80,39), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
            (calln, resultdef = AnsiString = "AnsiString", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
               proc = $fpc_pchar_to_ansistr(<var RawByteString>;const PChar;Word):AnsiString;
               left =
               (callparan, resultdef = PChar = "^Char", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = PChar = "^Char", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit], convtype = tc_equal
                     (subscriptn, resultdef = Pointer = "^untyped", pos = (80,31), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue]
                        (loadn, resultdef = TResourceStream = "TResourceStream", pos = (80,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           nil
                           symbol = DATASTREAM
                        )
                     )
                  )

               )
               (callparan, resultdef = <nil>, pos = (80,15), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = AnsiString = "AnsiString", pos = (80,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_is_funcret,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (80,12), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (80,15), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (81,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = $fpc_ansistr_setlength(var RawByteString;Int64;Word);
               left =
               (callparan, resultdef = Int64 = "Int64", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (calln, resultdef = Int64 = "Int64", pos = (81,38), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done,nf_isproperty,nf_no_lvalue]
                     proc = GetSize(<TStream>):Int64;
                     methodpointer =
                     (loadn, resultdef = TResourceStream = "TResourceStream", pos = (81,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = DATASTREAM
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (81,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                        (loadn, resultdef = TResourceStream = "TResourceStream", pos = (81,23), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           nil
                           symbol = DATASTREAM
                        )

                     )
                  )

               )
               (callparan, resultdef = RawByteString = "AnsiString", pos = (81,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = RawByteString = "AnsiString", pos = (81,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = AnsiString = "AnsiString", pos = (81,21), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                        nil
                        symbol = result
                     )
                  )

               )
               (callparan, resultdef = Word = "Word", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Word = "Word", pos = (81,5), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (82,20), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = Free(<TObject>);
               methodpointer =
               (loadn, resultdef = TResourceStream = "TResourceStream", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = DATASTREAM
               )
               left =
               (callparan, resultdef = <nil>, pos = (82,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = TResourceStream = "TResourceStream", pos = (82,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = DATASTREAM
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
ResizeGL(TRect);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (164,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (163,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;LongInt;LongInt;LongInt);CDecl>", pos = (164,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLVIEWPORT
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (164,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (subscriptn, resultdef = LongInt = "LongInt", pos = (164,40), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = OUTPUTRECT
               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (164,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (subscriptn, resultdef = LongInt = "LongInt", pos = (164,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = OUTPUTRECT
               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (164,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (subscriptn, resultdef = LongInt = "LongInt", pos = (164,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = OUTPUTRECT
               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (164,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (subscriptn, resultdef = LongInt = "LongInt", pos = (164,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = OUTPUTRECT
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (165,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (165,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (loadn, resultdef = PChar = "^Char", pos = (165,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
            nil
            symbol = UNIFORMNAME
         )
         (typeconvn, resultdef = PChar = "^Char", pos = (165,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_cstring_2_pchar
            (stringconstn, resultdef = <no type symbol> = "Constant String", pos = (165,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (166,70), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (166,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (loadn, resultdef = LongInt = "LongInt", pos = (166,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
            nil
            symbol = MIDPOINTUNIFORM
         )
         (calln, resultdef = LongInt = "LongInt", pos = (166,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = <nil>
            right =
            (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord;const PChar):LongInt;CDecl>", pos = (166,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = GLGETUNIFORMLOCATION
            )
            left =
            (callparan, resultdef = PChar = "^Char", pos = (166,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = PChar = "^Char", pos = (166,69), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = UNIFORMNAME
               )

            )
            (callparan, resultdef = LongWord = "DWord", pos = (166,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (loadn, resultdef = LongWord = "DWord", pos = (166,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                  nil
                  symbol = SHADERPROGRAM
               )

            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (167,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (167,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (loadn, resultdef = Single = "Single", pos = (167,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
            nil
            symbol = MIDPOINTX
         )
         (typeconvn, resultdef = Single = "Single", pos = (167,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit], convtype = tc_int_2_real
            (divn, resultdef = Int64 = "Int64", pos = (167,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (typeconvn, resultdef = Int64 = "Int64", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (calln, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue]
                     proc = getWidth(<var TRect>):LongInt;
                     methodpointer =
                     (loadn, resultdef = TRect = "<record type>", pos = (167,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify]
                        nil
                        symbol = OUTPUTRECT
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (167,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (nothingn, resultdef = $void = "untyped", pos = (167,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        )

                     )
                  )
               )
               (ordconstn, resultdef = Int64 = "Int64", pos = (167,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 2
               )
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (168,48), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (168,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (loadn, resultdef = Single = "Single", pos = (168,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
            nil
            symbol = MIDPOINTY
         )
         (typeconvn, resultdef = Single = "Single", pos = (168,16), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_explicit], convtype = tc_int_2_real
            (divn, resultdef = Int64 = "Int64", pos = (168,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (typeconvn, resultdef = Int64 = "Int64", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (calln, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_isproperty,nf_no_lvalue]
                     proc = getHeight(<var TRect>):LongInt;
                     methodpointer =
                     (loadn, resultdef = TRect = "<record type>", pos = (168,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_modify]
                        nil
                        symbol = OUTPUTRECT
                     )
                     left =
                     (callparan, resultdef = <nil>, pos = (168,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        (nothingn, resultdef = $void = "untyped", pos = (168,42), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        )

                     )
                  )
               )
               (ordconstn, resultdef = Int64 = "Int64", pos = (168,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 2
               )
            )
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (169,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (169,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (169,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLUSEPROGRAM
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (169,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongWord = "DWord", pos = (169,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
               nil
               symbol = SHADERPROGRAM
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (170,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (170,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;Single;Single);CDecl>", pos = (170,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLUNIFORM2F
         )
         left =
         (callparan, resultdef = Single = "Single", pos = (170,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = Single = "Single", pos = (170,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = MIDPOINTY
            )

         )
         (callparan, resultdef = Single = "Single", pos = (170,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = Single = "Single", pos = (170,41), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = MIDPOINTX
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (170,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongInt = "LongInt", pos = (170,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = MIDPOINTUNIFORM
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
ResizeGL(TRect);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (loadn, resultdef = LongInt = "LongInt", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
            nil
            symbol = MIDPOINTUNIFORM
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = Int64 = "Int64", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_int_2_int
            (loadn, resultdef = PChar = "^Char", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = UNIFORMNAME
            )
         )
         (ordconstn, resultdef = Int64 = "Int64", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 6148914691236517205
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = LongInt = "LongInt", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_equal
            (loadn, resultdef = Single = "Single", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = MIDPOINTX
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = LongInt = "LongInt", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_equal
            (loadn, resultdef = Single = "Single", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = MIDPOINTY
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (162,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (164,41), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (163,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;LongInt;LongInt;LongInt);CDecl>", pos = (164,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLVIEWPORT
               )
               left =
               (callparan, resultdef = LongInt = "LongInt", pos = (164,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (164,40), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = OUTPUTRECT
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (164,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (164,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = OUTPUTRECT
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (164,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (164,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = OUTPUTRECT
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (164,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (164,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     (loadn, resultdef = TRect = "<record type>", pos = (163,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = OUTPUTRECT
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (165,28), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (165,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (loadn, resultdef = PChar = "^Char", pos = (165,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                  nil
                  symbol = UNIFORMNAME
               )
               (typeconvn, resultdef = PChar = "^Char", pos = (165,18), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_cstring_2_pchar
                  (stringconstn, resultdef = <no type symbol> = "Constant String", pos = (165,18), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done]
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (166,70), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (166,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (loadn, resultdef = LongInt = "LongInt", pos = (166,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                  nil
                  symbol = MIDPOINTUNIFORM
               )
               (calln, resultdef = LongInt = "LongInt", pos = (166,42), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of function(LongWord;const PChar):LongInt;CDecl>", pos = (166,22), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = GLGETUNIFORMLOCATION
                  )
                  left =
                  (callparan, resultdef = PChar = "^Char", pos = (166,69), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                     (loadn, resultdef = PChar = "^Char", pos = (166,69), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = UNIFORMNAME
                     )

                  )
                  (callparan, resultdef = LongWord = "DWord", pos = (166,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                     (loadn, resultdef = LongWord = "DWord", pos = (166,56), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                        nil
                        symbol = SHADERPROGRAM
                     )

                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (167,47), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (167,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (loadn, resultdef = Single = "Single", pos = (167,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                  nil
                  symbol = MIDPOINTX
               )
               (typeconvn, resultdef = Single = "Single", pos = (167,16), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done,nf_explicit], convtype = tc_int_2_real
                  (divn, resultdef = Int64 = "Int64", pos = (167,41), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     (typeconvn, resultdef = Int64 = "Int64", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (blockn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_no_lvalue]
                           (statementn, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (tempcreaten, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                 size = 4, temptypedef = LongInt = "LongInt", tempinfo = $00007F563D1D5B40
                                 tempinit =
                                 nil
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (assignn, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (typeconvn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                                    (temprefn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write,nf_is_funcret]
                                       temptypedef = LongInt = "LongInt", tempinfo = $00007F563D1D5B40
                                    )
                                 )
                                 (typeconvn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_int_2_int
                                    (subn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                       (subscriptn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          (loadn, resultdef = TRect = "<record type>", pos = (167,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify]
                                             nil
                                             symbol = OUTPUTRECT
                                          )
                                       )
                                       (subscriptn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          (loadn, resultdef = TRect = "<record type>", pos = (167,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify]
                                             nil
                                             symbol = OUTPUTRECT
                                          )
                                       )
                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (tempdeleten, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 release_to_normal: TRUE, temptypedef = LongInt = "LongInt", temptype = tt_persistent, tempinfo = $00007F563D1D5B40
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = []
                              (temprefn, resultdef = LongInt = "LongInt", pos = (167,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_is_funcret]
                                 temptypedef = LongInt = "LongInt", tempinfo = $00007F563D1D5B40
                              )

                           )
                        )
                     )
                     (ordconstn, resultdef = Int64 = "Int64", pos = (167,45), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                        value = 2
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (168,48), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (168,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (loadn, resultdef = Single = "Single", pos = (168,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                  nil
                  symbol = MIDPOINTY
               )
               (typeconvn, resultdef = Single = "Single", pos = (168,16), loc = LOC_INVALID, expectloc = LOC_MMREG, flags = [nf_pass1_done,nf_explicit], convtype = tc_int_2_real
                  (divn, resultdef = Int64 = "Int64", pos = (168,42), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     (typeconvn, resultdef = Int64 = "Int64", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (blockn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_no_lvalue]
                           (statementn, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (tempcreaten, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_is_funcret]
                                 size = 4, temptypedef = LongInt = "LongInt", tempinfo = $00007F563D1D5C40
                                 tempinit =
                                 nil
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (assignn, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 (typeconvn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                                    (temprefn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_write,nf_is_funcret]
                                       temptypedef = LongInt = "LongInt", tempinfo = $00007F563D1D5C40
                                    )
                                 )
                                 (typeconvn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_int_2_int
                                    (subn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                                       (subscriptn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          (loadn, resultdef = TRect = "<record type>", pos = (168,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify]
                                             nil
                                             symbol = OUTPUTRECT
                                          )
                                       )
                                       (subscriptn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                                          (loadn, resultdef = TRect = "<record type>", pos = (168,24), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_modify]
                                             nil
                                             symbol = OUTPUTRECT
                                          )
                                       )
                                    )
                                 )
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                              (tempdeleten, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                                 release_to_normal: TRUE, temptypedef = LongInt = "LongInt", temptype = tt_persistent, tempinfo = $00007F563D1D5C40
                              )

                           )
                           (statementn, resultdef = $void = "untyped", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = []
                              (temprefn, resultdef = LongInt = "LongInt", pos = (168,34), loc = LOC_INVALID, expectloc = LOC_CREG, flags = [nf_pass1_done,nf_is_funcret]
                                 temptypedef = LongInt = "LongInt", tempinfo = $00007F563D1D5C40
                              )

                           )
                        )
                     )
                     (ordconstn, resultdef = Int64 = "Int64", pos = (168,46), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                        value = 2
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (169,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (169,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (169,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLUSEPROGRAM
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (169,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = LongWord = "DWord", pos = (169,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                     nil
                     symbol = SHADERPROGRAM
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (170,53), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (170,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;Single;Single);CDecl>", pos = (170,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLUNIFORM2F
               )
               left =
               (callparan, resultdef = Single = "Single", pos = (170,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = Single = "Single", pos = (170,52), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = MIDPOINTY
                  )

               )
               (callparan, resultdef = Single = "Single", pos = (170,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = Single = "Single", pos = (170,41), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = MIDPOINTX
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (170,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = LongInt = "LongInt", pos = (170,30), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = MIDPOINTUNIFORM
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
CreateRectBuffer(TRect):DWord;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (175,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (175,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;PGLuint);CDecl>", pos = (175,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLGENBUFFERS
         )
         left =
         (callparan, resultdef = PGLuint = "^LongWord", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = PGLuint = "^LongWord", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
               (addrn, resultdef = Pointer = "^untyped", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  (typeconvn, resultdef = LongWord = "DWord", pos = (175,20), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = LongWord = "DWord", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                        nil
                        symbol = result
                     )
                  )
               )
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (175,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongInt = "LongInt", pos = (175,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 1
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (176,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (176,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = UpdateRectBuffer(LongWord;TRect);
         left =
         (callparan, resultdef = TRect = "<record type>", pos = (176,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = TRect = "<record type>", pos = (176,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = RECT
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (176,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (typeconvn, resultdef = LongWord = "DWord", pos = (176,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_absolute], convtype = tc_equal
               (loadn, resultdef = LongWord = "DWord", pos = (176,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  nil
                  symbol = result
               )
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
CreateRectBuffer(TRect):DWord;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         (typeconvn, resultdef = LongInt = "LongInt", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_explicit,nf_internal], convtype = tc_int_2_int
            (loadn, resultdef = LongWord = "DWord", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
               nil
               symbol = result
            )
         )
         (ordconstn, resultdef = LongInt = "LongInt", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
            value = 1431655765
         )
      )

   )
   (statementn, resultdef = <nil>, pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (174,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (175,27), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (175,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;PGLuint);CDecl>", pos = (175,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLGENBUFFERS
               )
               left =
               (callparan, resultdef = PGLuint = "^LongWord", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (typeconvn, resultdef = PGLuint = "^LongWord", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                     (addrn, resultdef = Pointer = "^untyped", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                        (typeconvn, resultdef = LongWord = "DWord", pos = (175,20), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken,nf_absolute], convtype = tc_equal
                           (loadn, resultdef = LongWord = "DWord", pos = (175,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                              nil
                              symbol = result
                           )
                        )
                     )
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (175,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (175,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 1
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (176,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (176,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = UpdateRectBuffer(LongWord;TRect);
               left =
               (callparan, resultdef = TRect = "<record type>", pos = (176,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = TRect = "<record type>", pos = (176,32), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = RECT
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (176,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (typeconvn, resultdef = LongWord = "DWord", pos = (176,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_absolute], convtype = tc_equal
                     (loadn, resultdef = LongWord = "DWord", pos = (176,26), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        nil
                        symbol = result
                     )
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
UpdateRectBuffer(LongWord;TRect);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (193,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (183,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (statementn, resultdef = <nil>, pos = (185,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (185,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (185,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (185,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (185,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 0
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (185,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (185,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (186,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (186,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (186,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (186,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (186,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 1
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (186,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (186,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (187,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (187,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (187,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (187,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (187,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 2
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (187,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (187,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (188,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (188,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (188,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (188,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (188,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 3
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (188,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (188,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (189,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (189,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (189,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (189,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (189,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 4
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (189,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (189,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (190,21), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (190,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (190,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (190,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (190,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 5
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (190,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (190,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (191,23), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (191,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (191,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (191,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (191,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 6
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (191,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (191,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
         (statementn, resultdef = <nil>, pos = (192,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (192,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (192,11), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_callunique]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (192,7), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (192,12), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 7
                  )
               )
               (typeconvn, resultdef = LongWord = "DWord", pos = (192,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_int_2_int
                  (subscriptn, resultdef = LongInt = "LongInt", pos = (192,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        nil
                        symbol = RECT
                     )
                  )
               )
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (194,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (194,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (194,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLBINDBUFFER
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (194,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongWord = "DWord", pos = (194,44), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = ARRAYOBJECT
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (194,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (194,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 34962
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (195,79), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (195,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;Int64;const Pointer;LongWord);CDecl>", pos = (195,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLBUFFERDATA
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (195,78), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (195,78), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 35048
            )

         )
         (callparan, resultdef = Pointer = "^untyped", pos = (195,61), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (addrn, resultdef = Pointer = "^untyped", pos = (195,61), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (vecn, resultdef = LongWord = "DWord", pos = (195,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
                  (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (195,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
                     nil
                     symbol = DATA
                  )
                  (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (195,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     value = 0
                  )
               )
            )

         )
         (callparan, resultdef = Int64 = "Int64", pos = (195,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = Int64 = "Int64", pos = (195,51), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 32
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (195,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (195,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 34962
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (196,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (196,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (196,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLBINDBUFFER
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (196,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (196,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (196,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (196,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 34962
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
UpdateRectBuffer(LongWord;TRect);
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (calln, resultdef = $void = "untyped", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
         proc = $fpc_fillmem(out <Formal type>;QWord;Byte);
         left =
         (callparan, resultdef = $formal = "<Formal type>", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
            (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
               nil
               symbol = DATA
            )

         )
         (callparan, resultdef = Byte = "Byte", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
            (ordconstn, resultdef = Byte = "Byte", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
               value = 85
            )

         )
         (callparan, resultdef = QWord = "QWord", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
            (ordconstn, resultdef = QWord = "QWord", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
               value = 32
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (182,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (193,8), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (blockn, resultdef = $void = "untyped", pos = (183,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (statementn, resultdef = <nil>, pos = (185,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (185,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (185,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (185,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (185,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 0
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (185,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (185,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (186,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (186,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (186,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (186,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (186,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 1
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (186,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (186,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (187,22), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (187,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (187,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (187,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (187,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 2
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (187,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (187,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (188,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (188,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (188,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (188,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (188,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 3
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (188,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (188,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (189,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (189,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (189,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (189,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (189,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 4
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (189,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (189,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (190,21), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (190,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (190,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (190,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (190,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 5
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (190,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (190,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (191,23), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (191,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (191,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (191,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (191,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 6
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (191,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (191,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
               (statementn, resultdef = <nil>, pos = (192,24), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
                  (assignn, resultdef = $void = "untyped", pos = (192,7), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (192,11), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_callunique]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (192,7), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (192,12), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 7
                        )
                     )
                     (typeconvn, resultdef = LongWord = "DWord", pos = (192,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done], convtype = tc_int_2_int
                        (subscriptn, resultdef = LongInt = "LongInt", pos = (192,18), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                           (loadn, resultdef = TRect = "<record type>", pos = (183,8), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                              nil
                              symbol = RECT
                           )
                        )
                     )
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (194,45), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (194,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (194,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLBINDBUFFER
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (194,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = LongWord = "DWord", pos = (194,44), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = ARRAYOBJECT
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (194,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (194,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 34962
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (195,79), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (195,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;Int64;const Pointer;LongWord);CDecl>", pos = (195,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLBUFFERDATA
               )
               left =
               (callparan, resultdef = Pointer = "^untyped", pos = (195,61), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (addrn, resultdef = Pointer = "^untyped", pos = (195,61), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     (vecn, resultdef = LongWord = "DWord", pos = (195,58), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                        (loadn, resultdef = TRectArray = "Array[0..7] Of LongWord", pos = (195,54), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                           nil
                           symbol = DATA
                        )
                        (ordconstn, resultdef = <no type symbol> = "ShortInt", pos = (195,59), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                           value = 0
                        )
                     )
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (195,78), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (195,78), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 35048
                  )

               )
               (callparan, resultdef = Int64 = "Int64", pos = (195,51), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Int64 = "Int64", pos = (195,51), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 32
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (195,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (195,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 34962
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (196,35), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (196,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (196,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLBINDBUFFER
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (196,34), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (196,34), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (196,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (196,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 34962
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
BuildBuffers;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (200,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (202,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (ifn, resultdef = $void = "untyped", pos = (201,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (unequaln, resultdef = Boolean = "Boolean", pos = (201,26), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongWord = "DWord", pos = (201,6), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = SELECTIONARRAYOBJECT
            )
            (ordconstn, resultdef = LongWord = "DWord", pos = (201,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )
         )
         (calln, resultdef = $void = "untyped", pos = (202,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = <nil>
            right =
            (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;const PGLuint);CDecl>", pos = (202,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = GLDELETEBUFFERS
            )
            left =
            (callparan, resultdef = PGLuint = "^LongWord", pos = (202,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (typeconvn, resultdef = PGLuint = "^LongWord", pos = (202,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [], convtype = tc_equal
                  (addrn, resultdef = Pointer = "^untyped", pos = (202,45), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (loadn, resultdef = LongWord = "DWord", pos = (202,25), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write,nf_address_taken]
                        nil
                        symbol = SELECTIONARRAYOBJECT
                     )
                  )
               )

            )
            (callparan, resultdef = LongInt = "LongInt", pos = (202,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (ordconstn, resultdef = LongInt = "LongInt", pos = (202,22), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  value = 1
               )

            )
         )
         nil
         nil
      )

   )
   (statementn, resultdef = <nil>, pos = (203,61), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (assignn, resultdef = $void = "untyped", pos = (203,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         (loadn, resultdef = LongWord = "DWord", pos = (203,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_write]
            nil
            symbol = SELECTIONARRAYOBJECT
         )
         (calln, resultdef = LongWord = "DWord", pos = (203,27), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            proc = CreateRectBuffer(TRect):DWord;
            left =
            (callparan, resultdef = TRect = "<record type>", pos = (203,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               (calln, resultdef = TRect = "<record type>", pos = (203,60), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                  proc = Rect(LongInt;LongInt;LongInt;LongInt):<record type>;
                  left =
                  (callparan, resultdef = LongInt = "LongInt", pos = (203,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (203,59), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (203,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (203,56), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (203,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (203,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (203,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (203,50), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
                        value = 0
                     )

                  )
               )

            )
         )
      )

   )
)

*******************************************************************************
after the firstpass
BuildBuffers;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (200,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (200,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (200,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (200,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (200,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (202,46), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (ifn, resultdef = $void = "untyped", pos = (201,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (unequaln, resultdef = Boolean = "Boolean", pos = (201,26), loc = LOC_INVALID, expectloc = LOC_FLAGS, flags = [nf_pass1_done]
                  (loadn, resultdef = LongWord = "DWord", pos = (201,6), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = SELECTIONARRAYOBJECT
                  )
                  (ordconstn, resultdef = LongWord = "DWord", pos = (201,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )
               )
               (calln, resultdef = $void = "untyped", pos = (202,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
                  proc = <nil>
                  right =
                  (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongInt;const PGLuint);CDecl>", pos = (202,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = GLDELETEBUFFERS
                  )
                  left =
                  (callparan, resultdef = PGLuint = "^LongWord", pos = (202,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                     (typeconvn, resultdef = PGLuint = "^LongWord", pos = (202,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done], convtype = tc_equal
                        (addrn, resultdef = Pointer = "^untyped", pos = (202,45), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                           (loadn, resultdef = LongWord = "DWord", pos = (202,25), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write,nf_address_taken]
                              nil
                              symbol = SELECTIONARRAYOBJECT
                           )
                        )
                     )

                  )
                  (callparan, resultdef = LongInt = "LongInt", pos = (202,22), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                     (ordconstn, resultdef = LongInt = "LongInt", pos = (202,22), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                        value = 1
                     )

                  )
               )
               nil
               nil
            )

         )
         (statementn, resultdef = <nil>, pos = (203,61), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (assignn, resultdef = $void = "untyped", pos = (203,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               (loadn, resultdef = LongWord = "DWord", pos = (203,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_write]
                  nil
                  symbol = SELECTIONARRAYOBJECT
               )
               (calln, resultdef = LongWord = "DWord", pos = (203,27), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                  proc = CreateRectBuffer(TRect):DWord;
                  left =
                  (callparan, resultdef = TRect = "<record type>", pos = (203,60), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                     (calln, resultdef = TRect = "<record type>", pos = (203,60), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                        proc = Rect(LongInt;LongInt;LongInt;LongInt):<record type>;
                        left =
                        (callparan, resultdef = LongInt = "LongInt", pos = (203,59), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (203,59), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (203,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (203,56), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (203,53), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (203,53), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )

                        )
                        (callparan, resultdef = LongInt = "LongInt", pos = (203,50), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                           (ordconstn, resultdef = LongInt = "LongInt", pos = (203,50), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                              value = 0
                           )

                        )
                     )

                  )
               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
ClearGL;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (207,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (208,35), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (208,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(Single;Single;Single;Single);CDecl>", pos = (208,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLCLEARCOLOR
         )
         left =
         (callparan, resultdef = Single = "Single", pos = (208,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (realconstn, resultdef = Single = "Single", pos = (208,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value =  1.00000000000000000000E+0000
            )

         )
         (callparan, resultdef = Single = "Single", pos = (208,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (realconstn, resultdef = Single = "Single", pos = (208,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value =  1.00000000000000000000E+0000
            )

         )
         (callparan, resultdef = Single = "Single", pos = (208,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (realconstn, resultdef = Single = "Single", pos = (208,24), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value =  1.00000000000000000000E+0000
            )

         )
         (callparan, resultdef = Single = "Single", pos = (208,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (realconstn, resultdef = Single = "Single", pos = (208,19), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value =  1.00000000000000000000E+0000
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (209,54), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (209,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (209,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLCLEAR
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (209,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (209,53), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 16640
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
ClearGL;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (207,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (207,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (207,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (207,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (207,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (208,35), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (208,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(Single;Single;Single;Single);CDecl>", pos = (208,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLCLEARCOLOR
               )
               left =
               (callparan, resultdef = Single = "Single", pos = (208,34), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                  (realconstn, resultdef = Single = "Single", pos = (208,34), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done]
                     value =  1.00000000000000000000E+0000
                  )

               )
               (callparan, resultdef = Single = "Single", pos = (208,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                  (realconstn, resultdef = Single = "Single", pos = (208,29), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done]
                     value =  1.00000000000000000000E+0000
                  )

               )
               (callparan, resultdef = Single = "Single", pos = (208,24), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                  (realconstn, resultdef = Single = "Single", pos = (208,24), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done]
                     value =  1.00000000000000000000E+0000
                  )

               )
               (callparan, resultdef = Single = "Single", pos = (208,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = []
                  (realconstn, resultdef = Single = "Single", pos = (208,19), loc = LOC_INVALID, expectloc = LOC_CREF, flags = [nf_pass1_done]
                     value =  1.00000000000000000000E+0000
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (209,54), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (209,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (209,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLCLEAR
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (209,53), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (209,53), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 16640
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
DrawQuadBuffer(LongWord) is nested;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (214,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (215,47), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (215,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (215,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLBINDBUFFER
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (215,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongWord = "DWord", pos = (215,46), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = ARRAYOBJECT
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (215,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (215,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 34962
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (216,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (216,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (216,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLENABLEVERTEXATTRIBARRAY
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (216,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (216,32), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (217,58), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (217,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;LongWord;Byte;LongInt;const Pointer);CDecl>", pos = (217,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLVERTEXATTRIBPOINTER
         )
         left =
         (callparan, resultdef = Pointer = "^untyped", pos = (217,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (niln, resultdef = Pointer = "^untyped", pos = (217,57), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (217,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongInt = "LongInt", pos = (217,52), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
         (callparan, resultdef = Byte = "Byte", pos = (217,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = Byte = "Byte", pos = (217,49), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (217,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (217,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 5124
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (217,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongInt = "LongInt", pos = (217,31), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 2
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (217,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (217,28), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (218,37), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (218,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;LongInt);CDecl>", pos = (218,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLDRAWARRAYS
         )
         left =
         (callparan, resultdef = LongInt = "LongInt", pos = (218,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongInt = "LongInt", pos = (218,36), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 4
            )

         )
         (callparan, resultdef = LongInt = "LongInt", pos = (218,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongInt = "LongInt", pos = (218,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
         (callparan, resultdef = LongWord = "DWord", pos = (218,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (218,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 2
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (219,34), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (219,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (219,5), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLDISABLEVERTEXATTRIBARRAY
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (219,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (219,33), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
      )

   )
)

*******************************************************************************
after parsing
RenderGL;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (221,1), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
   (statementn, resultdef = <nil>, pos = (223,30), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (223,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (223,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLUSEPROGRAM
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (223,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongWord = "DWord", pos = (223,29), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = [nf_address_taken]
               nil
               symbol = SHADERPROGRAM
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (225,39), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (225,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = DrawQuadBuffer(<^untyped>;LongWord) is nested;
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (225,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (loadn, resultdef = LongWord = "DWord", pos = (225,38), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               nil
               symbol = SELECTIONARRAYOBJECT
            )

         )
         (callparan, resultdef = <nil>, pos = (225,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (nothingn, resultdef = $void = "untyped", pos = (225,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            )

         )
      )

   )
   (statementn, resultdef = <nil>, pos = (227,18), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
      (calln, resultdef = $void = "untyped", pos = (227,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
         proc = <nil>
         right =
         (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (227,3), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            nil
            symbol = GLUSEPROGRAM
         )
         left =
         (callparan, resultdef = LongWord = "DWord", pos = (227,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
            (ordconstn, resultdef = LongWord = "DWord", pos = (227,17), loc = LOC_INVALID, expectloc = LOC_INVALID, flags = []
               value = 0
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
RenderGL;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (221,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (221,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (221,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (221,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (221,1), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (223,30), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (223,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (223,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLUSEPROGRAM
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (223,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = LongWord = "DWord", pos = (223,29), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done,nf_address_taken]
                     nil
                     symbol = SHADERPROGRAM
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (225,39), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (225,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = DrawQuadBuffer(<^untyped>;LongWord) is nested;
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (225,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = LongWord = "DWord", pos = (225,38), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = SELECTIONARRAYOBJECT
                  )

               )
               (callparan, resultdef = <nil>, pos = (225,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = []
                  (loadparentfpn, resultdef = $parentfp_void_pointer = "^untyped", pos = (225,3), loc = LOC_INVALID, expectloc = LOC_REG, flags = [nf_pass1_done]
                     nil
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (227,18), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (227,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (227,3), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLUSEPROGRAM
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (227,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (227,17), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after the firstpass
DrawQuadBuffer(LongWord) is nested;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (214,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
   (statementn, resultdef = <nil>, pos = (214,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (214,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (214,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (blockn, resultdef = $void = "untyped", pos = (214,3), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
         (statementn, resultdef = <nil>, pos = (215,47), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (215,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongWord);CDecl>", pos = (215,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLBINDBUFFER
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (215,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = []
                  (loadn, resultdef = LongWord = "DWord", pos = (215,46), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                     nil
                     symbol = ARRAYOBJECT
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (215,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (215,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 34962
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (216,33), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (216,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (216,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLENABLEVERTEXATTRIBARRAY
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (216,32), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (216,32), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (217,58), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (217,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;LongWord;Byte;LongInt;const Pointer);CDecl>", pos = (217,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLVERTEXATTRIBPOINTER
               )
               left =
               (callparan, resultdef = Pointer = "^untyped", pos = (217,57), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (niln, resultdef = Pointer = "^untyped", pos = (217,57), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (217,52), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (217,52), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
               (callparan, resultdef = Byte = "Byte", pos = (217,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = Byte = "Byte", pos = (217,49), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (217,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (217,39), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 5124
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (217,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (217,31), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 2
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (217,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (217,28), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (218,37), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (218,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord;LongInt;LongInt);CDecl>", pos = (218,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLDRAWARRAYS
               )
               left =
               (callparan, resultdef = LongInt = "LongInt", pos = (218,36), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (218,36), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 4
                  )

               )
               (callparan, resultdef = LongInt = "LongInt", pos = (218,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongInt = "LongInt", pos = (218,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
               (callparan, resultdef = LongWord = "DWord", pos = (218,30), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (218,30), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 2
                  )

               )
            )

         )
         (statementn, resultdef = <nil>, pos = (219,34), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
            (calln, resultdef = $void = "untyped", pos = (219,5), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
               proc = <nil>
               right =
               (loadn, resultdef = <no type symbol> = "<procedure variable type of procedure(LongWord);CDecl>", pos = (219,5), loc = LOC_INVALID, expectloc = LOC_REF, flags = [nf_pass1_done]
                  nil
                  symbol = GLDISABLEVERTEXATTRIBARRAY
               )
               left =
               (callparan, resultdef = LongWord = "DWord", pos = (219,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = []
                  (ordconstn, resultdef = LongWord = "DWord", pos = (219,33), loc = LOC_INVALID, expectloc = LOC_CONST, flags = [nf_pass1_done]
                     value = 0
                  )

               )
            )

         )
      )

   )
)

*******************************************************************************
after parsing
$OPENGLPROCS_$$_init$; Register;
*******************************************************************************
nil

*******************************************************************************
after the firstpass
$OPENGLPROCS_$$_init_implicit$; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
   (statementn, resultdef = <nil>, pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
)

*******************************************************************************
after the firstpass
$OPENGLPROCS_$$_finalize_implicit$; Register;
*******************************************************************************
(blockn, resultdef = $void = "untyped", pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done,nf_usercode_entry]
   (statementn, resultdef = <nil>, pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
   (statementn, resultdef = <nil>, pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = []
      (nothingn, resultdef = $void = "untyped", pos = (230,4), loc = LOC_INVALID, expectloc = LOC_VOID, flags = [nf_pass1_done]
      )

   )
)
